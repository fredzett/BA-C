# FALLSTUDIE {.unnumbered .no-toc}

## Zwecke der Fallstudie

Wir haben in @sec-analyseprozess bereits erläutert, dass es sich bei Business Analytics um einen Prozess handelt, der verschiedene Schritte umfasst. In diesem Kapitel werden wir nun einen ersten, vorsichtigen Blick auf einen konkreten Fall ("Fallstudie"). Die Fallstudie soll Ihnen einen Eindruck davon vermitteln, was Sie in diesem Kurs erwartet. Diese Fallstudie verfolgt somit zwei Ziele:

1. Anwendungsbeispiele für die einzelnen Schritte des Analyseprozesses geben und

2. Programmierbeispiele für die einzelnen Schritte des Analyseprozesses vorzustellen.



::: {.callout-caution}
## Hinweis

In dieser Fallstudie werden Dinge vorgegriffen, die Sie noch nicht gelernt haben. Ziel der Fallstudie ist es ausdrücklich nicht, dass Sie jede Code-Zeile nachvollziehen können. Vielmehr sollen Sie einen Eindruck davon vermittelt bekommen, was Sie in diesem Kurs erwartet bzw. was Sie - vorausgesetzt Sie arbeiten kontinuierlich mit - am Ende in der Lage sind selber umzusetzen. 

:::

Wir haben uns bewusst für diesen __Top-Down-Ansatz__ entschieden, d.h. wir beginnen mit dem großen Ganzen und gehen dann Schritt für Schritt in die Details. 

Warum glauben wir, dass dieser Ansatz sinnvoll ist?

Als **Analogie** können Sie sich vorstellen, dass wir einem kleinen Kind beibringen wollen Fußball zu spielen. Sie würden nie auf die Idee kommen, dem kleinen Kind als erstes die korrekte Fußstellung beim Freistoß oder gar die Abseitsregel zu erläutern. Stattdessen würden Sie vielleicht mit dem Kind auf den nächsten Fußballplatz gehen und zuschauen, wie andere Fußball spielen. Sie würden also zunächst das große Ganze zeigen - ohne, dass das Kind alle Details bereits versteht - und es so neugierig auf das Spiel machen. Die Details und Feinheiten folgen dann Schritt für Schritt. Das Kind wird einen Ball haben und auch spielen wollen. 

Gehen Sie diese Fallstudie also nicht mit dem Anspruch durch, alles bereits verstehen und selber umsetzen zu müssen. Vielmehr sollten Sie die übergeordnete Fragestellung durchdenken, um dann zu erleben, wie diese Fragestellung mittels Python beantwortet wird. Dies wird Sie hoffentlich für das große Ganze begeistern und so das Fundament für alles weitere legen. 

## Fallstudie: Fashion Avenue GmbH

### Einleitung

Die Fashion Avenue GmbH ist ein Einzelhandelsunternehmen, das sich auf den Verkauf von Bekleidung und Accessoires spezialisiert hat. Sie bietet eine breite Palette von Produkten für Frauen, Männer und Kinder an und betreibt in Bielefeld mehrere Filialen.

Die Firma wurde vor mehreren Jahren von Anna Meyer - einer erfahrenen Einzelhändlerin - gegründet. Sie hat sich zum Ziel gesetzt, hochwertige und modische Produkte zu erschwinglichen Preisen anzubieten. Im Laufe der Jahre hat sich die Firma zu einem wichtigen Akteur in der Einzelhandelsbranche Bielefelds entwickelt und hat sich einen Namen als eine Marke gemacht, die für Qualität und Service bekannt ist. Die Mitarbeiter des Unternehmens "Fashion Avenue" sind ein engagiertes Team von Verkäufer:innen. Sie bestehen aus einer Mischung aus erfahrenen Verkäufern und neuen, jungen und motivierten Mitarbeitern, die die Marke repräsentieren und für ihre hohe Kundenorientierung und ihren ausgezeichneten Service bekannt sind.

Seit einigen Monaten sind die Verkäufe jedoch rückläufig und Anna Meyer fragt sich, was der Grund dafür sein könnte. Es wurden auch bereits Gespräche mit einigen Mitarbeiter:innen geführt, jedoch kann niemand den Grund für den rückläufigen Umsatz erkennen. 

Um dies herauszufinden, hat das Unternehmen begonnen, Daten über alle Transaktionen des letzten Jahres zu sammeln und möchte nun diese Daten analysieren, um die Ursache für den Rückgang der Verkäufe zu finden.

### Analyseprozess

Der Analyseprozess besteht aus folgenden Schritten, die wir im Folgenden durchlaufen werden:

1. Problemstellung
2. Einlesen der Daten 
3. Aufbereitung der Daten
4. Transformation der Daten
5. Visualisierung der Daten
6. Modellierung der Daten
7. Kommunikation der Ergebnisse  

In @sec-analyseprozess haben wir diesen graphisch wie folgt zusammengefasst:

![Analyseprozess](../../_assets/Analyse_Prozess.svg){width="100%"}

Lassen Sie uns nun die einzelnen Schritte genauer betrachten.

#### Problemstellung

Der erste Schritt der Datenanalyse ist die Definition des Analyseproblems. Dieser Schritt beinhaltet noch keine Datenanalyse im eigentlichen Sinne, ist jedoch essenziell für alle  weiteren Schritte. Denn: ohne ein klar umrissenes Analyseproblem ist es nicht möglich, die richtigen Daten auszuwählen, die richtigen Analysen durchzuführen etc. Wir laufen zudem Gefahr, dass wir uns mit unser Analyse "verzetteln", d.h. wir Ergebnisse produzieren, jedoch keine Antwort auf die eigentliche Fragestellung liefern.

Machen wir uns also zunächst klar, was wir herausfinden wollen. Aus der Einleitung wissen wir, dass die Verkäufe rückläufig sind und der Grund dafür bisher nicht identifiziert werden konnte. Die Fragestellung könnte also lauten:

> __Was ist der Grund für den Rückgang des Umsatzes?__

#### Einlesen der Daten

Natürlich fokussieren wir uns in diesem Kurs auf die technischen Aspekte des Einlesens von Daten. Jedoch ist es wichtig an dieser Stelle zu betonen, dass dem Einlesen der Daten natürlich mindestens zwei weitere Schritte vorausgehen:

Zunächst müssen wir uns die Frage stellen, welche Daten wir benötigen, um die Fragestellung zu beantworten. Wir müssen  uns Fragen, welche Variablen für unsere Analyse relevant sind. Bei der Überlegung geht es explizit auch um Daten, die im Unternehmen vielleicht gar nicht vorliegen. Schließlich gibt es auch die Möglichkeit, Daten zu generieren, die wir für unsere Analyse benötigen. Neben der Identifizierung der benötigten Daten ist es dann  wichtig zu überprüfen, ob und in welcher Form die Daten überhaupt vorhanden sind. Idealerweise liegen die benötigten Daten bereits intern vor - z.B. in Form einer bestehenden Datenbank oder Excel-Dateien. Sollte dies nicht der Fall sein, gibt es vielleicht die Möglichkeit Daten extern - z.B. über externe Datenanbieter - einzukaufen. Auch besteht ggf. die Möglichkeit Daten intern zu erheben (z.B. über Kundenumfragen) oder zu generieren (z.B. über die Simulation von Prozessen etc.). 

In Summe sind diese Voranalysen wichtig und als Unternehmen sollten wir uns diese Zeit nehmen, um die Datenanalyse effizient und zielführend durchzuführen. Auch sollte dem Hang widerstanden werden "nur" interne und bereits verfügbare Daten zu analysieren. Dies mag auf den ersten Blick einfacher erscheinen, jedoch kann es sein, dass wir uns dadurch der Möglichkeit berauben, die Fragestellung sinnvoll oder zumindest besser zu beantworten.

In unserem vorliegenden Fall haben wir die für uns (zumindest im ersten Schritt) relevanten Daten bereits in Form von Transaktionsdaten vorliegen. Die Daten wurden aus dem ERP-System exportiert und liegen nun als CSV-Datei vor.

Um die Daten einzulesen und weiterzuverarbeiten, verwenden wir die Python-Bibliothek __pandas__. Die Python-Bibliothek (siehe [Dokumentation](https://pandas.pydata.org/pandas-docs/stable/index.html)]) ist ein wichtiges Werkzeug für die Datenanalyse. Sie ermöglicht das einfache Einlesen, Verarbeiten und Manipulieren von Daten in Python. Mit pandas kann man schnell und einfach Tabellen (Dataframes) erstellen, in denen die Daten gespeichert werden. Die Bibliothek bietet zudem viele nützliche Funktionen, wie z.B. die Möglichkeit, Daten zu filtern, zu sortieren und zu aggregieren. Auch das Zusammenführen von mehreren Tabellen ist mit pandas sehr einfach möglich. Daher wird die Bibliothek oft in der Datenanalyse verwendet und ist ein wichtiger Bestandteil unseres "Analyse-Werkzeugkoffers" in Python.

Wir lesen die Daten nun mit der Funktion `read_csv()` ein und weisen die Daten der Variable `df` zu. Danach geben wir - mit der Funktion `head()`- die ersten fünf Zeilen der Tabelle aus, um einen ersten Überblick über die Daten zu erhalten.

```{python}
# Importieren der Bibliothek pandas
import pandas as pd 

# Einlesen der Daten (hier: csv-Datei)
df = pd.read_csv("../../_data/transactions_fashion_avenue.csv")

# Ausgabe der ersten fünf Zeilen der Tabelle
df.head()
```


#### Aufbereitung der Daten

Nachdem wir die Daten eingelesen haben, können wir uns nun mit der Aufbereitung der Daten beschäftigen. Hierzu gehören z.B. das Entfernen von fehlenden Werten, das Korrigieren von offensichtlich fehlerhaften Werte, das Umwandeln von Datentypen, das Umbennen von Spalten etc.

Schauen wir uns zunächst an, ob Daten fehlen. Dazu verwenden wir die Funktion `info()`. Diese Funktion gibt uns Informationen über die Tabelle, wie z.B. die Anzahl der Zeilen, die Anzahl der Spalten, den Datentyp der Spalten, die Anzahl der nicht-leeren Werte etc.

```{python}
# Ausgabe von Informationen über die Tabelle
df.info()
```

Wir sehen, dass es sich bei dem Datensatz um 10.000 Transaktionen handelt und dass keine der Spalten fehlende Werte enthält. Im vorliegenden Fall ist der Datensatz bereits realtiv sauber und wir müssen keine größeren Aufbereitungen vornehmen. 

Lassen Sie uns lediglich zwei Dinge verändern, die uns das Leben in der weiteren Analyse vereinfachen werden: 

__1. Umbennen der Spalte `ø Preis`__^[Hinweis: ein­fach­heits­hal­ber haben wir hier den durschnittlichen Preis der gesamten Transaktion geben, d.h. $\frac{\text{Preis der Transaktion}}{\text{Anzahl gekaufter Produkte}} = ø Preis.$
 Reale Daten würden meist die Preise je Produkt enthalten.]: wir bennen die Spalte in  `Preis` um. Das erleichtert uns den Verweis auf die Spalte zukünftig etwas. Wir verwenden hierfür die Funktion `rename()`.

__2. Ändern des Datentyps der Spalten `Datum` und `Uhrzeit`__: die beiden Spalten `Datum` und `Uhrzeit` sind aktuell als `object` gespeichert. Der Datentyp `object` ist ein generischer Datentyp, der für alle Arten von Daten verwendet werden kann, er bietet sich an, wenn wir in einer Spalte z.B. sowohl Zahlen als auch Texte speichern wollen. Ein Nachteil des Datentyps `object` ist, dass wir mit diesen Daten nicht weiterrechnen bzw., dass viele für spezielle Datentypen entwickelte Funktionen nicht angewendet werden können. In unserem Fall handelt es sich bei den Spalten `Datum` und `Uhrzeit` um Datumsangaben und wir möchten diese Spalten später auch als solche verwenden. So können wir z.B. die Spalte `Datum` nutzen, um die Transaktionen nach Wochentagen oder Monaten zu gruppieren. Dies ist jedoch nur möglich, wenn die Spalte als Datumsangabe gespeichert ist. Wir können den Datentyp der Spalten `Datum` mit der Funktion `astype()` in den Datentype `datetime64[ns]` ändern.


```{python}
# Umbenennen der Spalte "ø Preis" in "Preis"
df = df.rename(columns={"ø Preis": "Preis"})

# Ändern des Datentyps der Spalten "Datum" und "Uhrzeit"
df = df.astype({"Datum": "datetime64[ns]"})
```

Wir können nun nochmals die Funktion `info()` verwenden, um zu überprüfen, ob die Änderungen korrekt durchgeführt wurden.

```{python}
# Ausgabe von Informationen über die Tabelle
df.info()
```

Wie wir sehen können, wurden die Änderungen korrekt durchgeführt.


#### Erkenntnisse gewinnen: Transformation und Visualisierung

Wie bereits im Kapitel @sec-analyseprozess beschrieben, befinden wir uns nun in der explorativen Analysephase, in der sich die Schritte^[Hinweis: den Schritt der Modellierung lassen wir an dieser Stelle noch aus]:

- Transformation der Daten
- Visualisierung der Daten

oft iterativ wiederholen.

 Wir haben  einen "sauberen" Datensatz vorliegen und können  uns nun mit der Fragestellung beschäftigen und versuchen, die Ursache für den Umsatzrückgang zu finden. In diesem Schritt ist es üblich, dass wir erste Hypothesen aufstellen und versuchen, diese mit den Daten und mittels __einfacher statistischer Methoden__ (z.B. Durchschnitte über Gruppen bilden) zu überprüfen. 

Im ersten Schritt sollten wir jedoch zunächst überprüfen, ob die Ist-Situation - d.h. der vom Unternehmen beschriebene Umsatzrückgang - aus den Daten ersichtlich wird. Hierfür könnten wir z.B. die monatlichen Umsätze berechnen und schauen, ob wir einen negativen Trend beobarten können.

Schauen wir uns dafür den Datensatz nochmals an:

```{python}
# Ausgabe der ersten 5 Zeilen
df.head()
```

Es wird deutlich, dass die Information `Umsatz` nicht (explizit) im Datensatz enthalten ist. Wir können jedoch die Information `Umsatz` aus den Spalten `Menge` und `Preis` berechnen. Wir können dies über die Funktion `assign()` erreichen. Darüber hinaus können wir auch aus der Spalte `Datum` weitere Informationen (Monat, Woche etc.) extrahieren. Wir können dies mit der Funktion `dt.` erreichen. 


```{python}
# Hinzufügen einer neuen Spalte "Umsatz", "Wochentag" und "Monat"
df = df.assign(Umsatz = df["Menge"] * df["Preis"], 
               Monat = df["Datum"].dt.month, 
               Woche = df["Datum"].dt.week,
               Wochentag = df["Datum"].dt.day_name())

# Ausgabe der ersten fünf Zeilen der Tabelle
df.head()
```

Wir können nun den Umsatztrend über die Zeit untersuchen. Um den Trend in einer Zeitreihe zu analysieren bietet es sich an, die Zeitreihe graphisch darzustellen. Lassen Sie uns zunächst die Umsatzdaten in einem Liniendiagramm darstellen. Auch wenn dies nicht zwingend notwendig ist und es auch andere Ansätze gäbe, verwenden wir die Bibliothek `seaborn` (siehe [hier](https://seaborn.pydata.org/)). Die Bibliothek wurde für die Zwecke der explorativen Datenanalyse entwickelt und bietet eine Vielzahl von Funktionen, die es uns ermöglichen, die Daten schnell und einfach zu visualisieren. Um ein Liniendiagramm zu erstellen, verwenden wir die Funktion `lineplot()`.

```{python}
#| echo: false
#### INTERNAL
import matplotlib.pyplot as plt
plt.rcParams["axes.spines.top"] = False
plt.rcParams["axes.spines.right"] = False
```



```{python}
#| fig-align: center
# Laden der Bibliothek seaborn
import seaborn as sns

# Erstellen eines Liniendiagramms
line = sns.lineplot(data=df, x="Datum", y="Umsatz", ci=None);
```

Der Trend ist deutlich erkennbar. Der Umsatz scheint kontinuierlich zu sinken. Jedoch ist der Umsatz sehr volatil, da wir jede einzelne Transaktion im Graphen visualisiert haben. Es macht daher Sinn, die Umsatzdaten zu aggregieren und dann zu visualisieren. Wir können z.B. die Umsätze einer Woche oder eines Monats aggregieren und dann in einem Liniendiagramm darstellen. Lassen Sie uns die Wochenumsätze  betrachten. Hierfür müssen wir die Transaktionen für jede Woche im Jahr (d.h. Wochen 1 bis 52) aufsummieren. Dazu verwenden wir die Funktion `groupby()`, um die Daten zu gruppieren und die Funktion `agg()` um die Daten zu aggregieren. In unserem speziellen Fall wollen wir die Summe der Umsätze pro Woche berechnen. 

```{python}
#| fig-align: center
# Aggregieren der Umsätze pro Woche
umsatz_pro_woche = df.groupby("Woche").agg({"Umsatz": "sum"})
sns.lineplot(data=umsatz_pro_woche, x=umsatz_pro_woche.index, y="Umsatz");
```

Wir sehen, dass der Umsatzrückgang auch für die Wochenumsätze deutlich erkennbar ist. Lassen Sie uns nun die Monatsumsätze betrachten. Hierfür müssen wir die Transaktionen für jeden Monat im Jahr (d.h. Monate 1 bis 12) aufsummieren. Der obige Code kann hierfür nahezu unverändert verwendet werden; lediglich die Spalte `Woche` muss durch die Spalte `Monat` ersetzt werden.

```{python}
#| fig-align: center
# Aggregieren der Umsätze pro Monat
umsatz_pro_monat = df.groupby("Monat").agg({"Umsatz": "sum"})
sns.lineplot(data=umsatz_pro_monat, x=umsatz_pro_monat.index, y="Umsatz");
```

Nachdem wir die Problembeschreibung validiert haben, können wir nun mit der Analyse der Ursachen beginnen. Lassen Sie uns dafür zunächst überlegen, was mögliche Ursachen für den Umsatzrückgang sein könnten. 

Hier ein paar Beispiele die uns spontan in den Sinn kommen könnten^[Hinweis: an dieser Stelle ist es wichtig, dass Sie sich nicht auf eine einzige Ursache festlegen. Es können auch mehrere oder andere Ursachen für den Umsatzrückgang verantwortlich sein. Wichtig ist, dass Sie sich auf die Ursachen konzentrieren, die Sie im Rahmen der Analyse überprüfen können.]:

1. die Preise sind gesunken
2. die Nachfrage ist gesunken
3. das Zahlungsverhalten der Kunden hat sich verändert
4. die Kundenstruktur hat sich verändert

Lassen Sie uns nun die vier möglichen Ursachen genauer untersuchen und schauen, ob wir Hinweise auf die Ursache des Umsatzrückgangs finden können.

__Ursache 1:__ Preise sind gesunken

Eine mögliche Ursache für den Umsatzrückgang ist, dass die Kunden je Kauf (d.h. in unserem Fall je Transaktion bzw. je Zeile im Datensatz) weniger Geld ausgeben. Um dies zu überprüfen können wir schauen, ob der Preis je Transaktion über die Zeit gesunken ist. Lassen Sie uns dazu auch wieder eine monatliche Aggregation der Daten durchführen. Wir gruppieren also unsere Daten wieder nach Monat und aggregieren die Preise pro Monat. Für den Preis macht es jedoch keinen Sinn diesen zu summieren, sondern wir wollen den Durchschnittspreis pro Monat berechnen. Dazu verwenden wir die Funktion `mean()`.

```{python}
#| fig-align: center
# Aggregieren der Preise pro Monat
preis_pro_monat = df.groupby("Monat").agg({"Preis": "mean"})
preis_pro_monat
```

```{python}
sns.lineplot(data=preis_pro_monat, x=preis_pro_monat.index, y="Preis");
```

Die Analyse zeigt deutlich, dass der durchschnitlliche Umsatz je Transaktion über die Zeit gesunken ist. Während Kunden im Januar 2022 noch durchschnittlich 35,20 € pro Transaktion ausgegeben haben, waren es im Dezember 2022 nur noch 29,11 €. Davon ausgehend, dass das Unternehmen die Preise in diesem Zeitraum nicht gesenkt hat, ist dies ein Indikator dafür, dass Kunden günstigere Produkte auszuwählen scheinen.

__Ursache 2:__ Nachfrage ist gesunken

Eine weitere mögliche Ursache für den Umsatzrückgang ist, dass die Nachfrage nach den Produkten des Unternehmens gesunken ist. Um dies zu überprüfen können wir schauen, ob die durchschnittliche Menge je Transaktion über die Zeit gesunken ist. Lassen Sie uns dazu auch wieder eine monatliche Aggregation der Daten durchführen. Wir gruppieren also unsere Daten wieder nach Monat und aggregieren die Mengen pro Monat. Für die Menge macht es jedoch keinen Sinn diese zu summieren, sondern wir wollen die durchschnittliche Menge pro Monat berechnen. Dazu verwenden wir die Funktion `mean()`.

```{python}
#| fig-align: center
# Aggregieren der Menge pro Monat 
menge_pro_monat = df.groupby("Monat").agg({"Menge": "mean"})
menge_pro_monat
```

```{python}
sns.lineplot(data=menge_pro_monat, x=menge_pro_monat.index, y="Menge");
```

Aus der Analyse geht hervor, dass auch die durchschnittliche Menge je Transaktion über die Zeit gesunken ist. In Summe hat unsere (an dieser Stelle nur sehr oberflächliche) Analyse aufgezeigt, dass Kunden je Einkauf günstigere und kleinere Mengen kaufen. 

Lassen Sie uns nun noch die beiden Ursachen 3 und 4 untersuchen, da wir uns zum einen nicht auf eine einzige Ursache festlegen wollen und zum anderen auch die anderen Ursachen nicht ausschließen können. Auch können uns die weiteren Analysen ggf. Aufschluss darüber geben, warum die Kunden günstigere und kleinere Mengen kaufen.

__Ursache 3:__ Zahlungsverhalten der Kunden hat sich verändert

Der Datensatz enthält nicht viele Informationen über das Zahlungsverhalten. Wir haben lediglich die Information über die Zahlungsmethode. Schauen wir uns deshalb doch zunächst an, ob die Kunden eine Zahlungsmethode bevorzugen. 

Dazu berechnen wir zunächst die Gesamtumsätze sowie Anzahl an Transaktionen je Zahlungsmethode. Wir können dies wieder über einen simple Gruppierung der Daten via `groupby()` und anschließender Aggregation der Daten via `agg()` erreichen.

```{python}
# Berechnen der Gesamtumsätze und Anzahl an Transaktionen je Zahlungsmethode
umsatz_je_zahlungsmethode = df.groupby("Zahlungsmethode").agg({"Umsatz": ["sum", "count"]})
umsatz_je_zahlungsmethode
```

Die Aufstellung zeigt, dass die Summe an Umsätzen sowie die Anzahl an Transaktionen sich nicht sehr stark unterscheiden, je nachdem ob die Kunden mit Kreditkarte, Bar oder per EC-Karte bezahlt haben.

Durch die Aggregation der Umsätze kann Information verloren gehen, so dass es mit unter Sinn macht, die einzelnen Transaktionsdaten zu visualisieren. Hierzu eignen sich Diagramme, die Verteilungen und Streuungen von Daten darstellen. Ein solches Diagramm ist das sogenannte _Stripplot_. Dieses Diagramm zeigt die Verteilung der Datenpunkte in einem Diagramm an. 

```{python}
#| fig-align: center
#| fig-width: 100%
sns.stripplot(data=df, x="Zahlungsmethode", y="Umsatz");
```

Es wird deutlich, dass sich die Streuung der Umsätze je nach Zahlungsmethode nicht wesentilch unterscheiden. 

Wir wissen nun, dass Kunden, die z.B. viel und teuer erkaufen nicht eine bestimmte Zahlungsmethode bevorzugen. Jedoch haben wir noch nicht untersucht, ob sich das Zahlungsverhalten der Kunden über die Zeit verändert hat. 

Lassen Sie uns dies nun untersuchen. Dazu berechnen wir die Umsätze je Monat und je Zahlungsmethode. Das folgende Diagramm zeigt die Umsätze je Monat und je Zahlungsmethode.

```{python}
#| fig-align: center
sns.catplot(data=df, x="Monat", y="Umsatz", kind="point", hue="Zahlungsmethode", ci=None);
```

Die Analyse liefert uns keine neuen Erkenntnisse hinsichtlich der Ursache für den Umsatzrückgang. Die Umsätze je Monat und je Zahlungsmethode unterscheiden sich nicht wesentlich und insgesamt ist der Umsatzrückgang über die Zeit sehr ähnlich.

Lassen Sie uns deshalb die vierte mögliche Ursache untersuchen.

__Ursache 4:__ Kundenstruktur hat sich verändert

Auch zur Kundenstruktur haben wir nur wenige Informationen. Wir wissen lediglich, wie alt die Kunden sind. Für weitere Analysen müssten wir uns mit dem Unternehmen in Verbindung setzen und weitere Informationen über die Kundenstruktur erhalten.

Bevor wir eine mögliche Veränderung der Kundenstruktur (in unserem Falle: Alter) analysieren, sollten wir zunächst die Verteilung der Kunden anhand ihres Alters untersuchen, um ein Gefühl für unsere Kundenstruktur zu bekommen. Wir können das über ein Histogramm visualisieren, welches wir mit der Funktion `histplot()` aus der Bibliothek `seaborn` erstellen können.

```{python}
#| fig-align: center
sns.histplot(data=df, x="Alter");
```

Die Verteilung der Kunden zeigt, dass unsere Kunden grds. aus allen Altersgruppen kommen. Jedoch fällt auf, dass die Verteilung zwei Spitzen aufweist. Die erste Spitze liegt bei ca. __25 Jahren__, die zweite Spitze bei ca. __55 Jahren__. 

Lassen Sie uns nun schauen, ob Kunden mit einem bestimmten Alter mehr oder weniger kaufen. Um dies zu untersuchen, berechnen wir einen neue Variable `Altersgruppe`, die die Kunden in Altersgruppen von 10 Jahren aufteilt, d.h. die Kunden werden in die Altersgruppen 0-20, 21-30, 31-40, ..., 81-90, 91-100 eingeteilt.^[Hinweis: wir müssen diese Aufteilung in Gruppen nicht vornehmen, jedoch macht diese die Visualisierung der Daten einfacher.]

```{python}
# Berechnen der Altersgruppen
df["Altergruppe"] = pd.cut(df["Alter"], 
                            bins=[0, 20, 30, 40, 50, 60, 70, 80, 90, 100], 
                            labels=["0-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100"])
df.head()
```

Nun können wir die Umsätze je Altersgruppe berechnen und visualisieren. Die untenstehende Tablle zeigt die durchschnittlichen Umsätze je Transaktion und je Altersgruppe.

```{python}
#| fig-align: center

# Berechnen der Umsätze je Altersgruppe
umsatz_je_alter = df.groupby("Altergruppe").agg({"Umsatz": ["mean", "count"]})
umsatz_je_alter
```

Die Tabelle zeigt deutlich, dass unterschiedliche Altergruppen unterschiedliche Umsätze generieren. Kunden bis ca. 40 Jahre geben im Schnitt deutlich weniger aus, als Kunden, die älter als 40 Jahre sind.

Aus der untenstehenden Visualisierung geht dies noch deutlicher hervor.

```{python}
sns.stripplot(data=df, x="Altergruppe", y="Umsatz", jitter=0.1);
```

Es scheint also so, als ob sich die Kundenstruktur verändert hat. Kunden bis ca. 40 Jahre kaufen weniger oder günstiger ein, als Kunden, die älter als 40 Jahre sind.

Diese Erkenntnis alleine reicht jedoch nicht aus, um die Ursache für den Umsatzrückgang zu finden. Wir müssen nun untersuchen, ob sich die Altersstruktur über die Zeit verändert hat. Eine Erklärung für den Umsatzrückgang könnte sein, dass das Unternehmen mit der Zeit mehr Kunden aus der Altersgruppe "unter 40" gewonnen hat, die weniger oder günstiger kaufen.

Um dies zu untersuchen, berechnen wir zunächst eine neue Variable `Kundengruppe` mit den Werten "alt" (>40 Jahre) und "jung" (<=40 Jahre). Wir können dann im Anschluss schauen, ob der Anteil an jungen Kunden in den letzten Monaten gestiegen ist. 

```{python}
# Berechnen der Kundengruppe
import numpy as np 
df["Kundengruppe"] = np.where(df["Alter"] <= 40, "jung", "alt")
df.head()
```

Den Anteil an jungen Kunden je Monat berechnen wir, indem wir die Anzahl der jungen Kunden je Monat durch die Gesamtanzahl der Kunden je Monat teilen. Die untenstehende Tabelle zeigt die Ergebnisse.

```{python}
# Berechnen des Anteils an jungen Kunden je Monat
df.groupby(["Monat"]).agg({"Kundengruppe": [lambda group: sum(group == "jung")/len(group)]}).plot(legend=False);
```

Es ist offensichtlich, dass der Anteil an jungen Kunden in den letzten Monaten gestiegen ist. Dies könnte die Ursache für den Umsatzrückgang sein.

Die untenstehende Visualisierung zeigt die Entwicklung der Umsätze je Monat und je Kundengruppe (jung vs. alt). Die blaue Linie zeigt die Umsätze der jungen Kunden, die orangene Linie zeigt die Umsätze der alten Kunden. Es ist ersichtlich, dass die Umsätze der jeweiligen Kundengruppen in den letzten Monaten konstant geblieben sind. Dies bestätigt die Hypothese, dass der Umsatzrückgang auf den Anstieg des Anteils an jungen Kunden zurückzuführen ist  und  nicht darauf, dass sich die Umsätze der jeweiligen Kundengruppen verändert haben.

```{python}
#| fig-align: center
sns.catplot(x="Monat", y="Preis", 
            data=df,  kind="point", 
            palette={"jung": "blue", "alt": "orange"}, hue="Kundengruppe");
```

#### Zwischenfazit

Lassen Sie uns - bevor wir mit unser Analyse fortfahren - ein kurzes Zwischenfazit ziehen und unsere bisherigen Erkenntnisse zusammenfassen.

- wir haben im ersten Schritt unsere Problem definiert ("Was ist der Grund für den Rückgang des Umsatzes?")
- nachfolgend haben wir die Daten geladen und bereinigt. Die Bereinigung der Daten war nicht besonders umfassend, da der Datensatz bereits sehr sauber war. In der Praxis ist die Bereinigung der Daten jedoch ein sehr wichtiger Schritt, da die Daten in der Regel sehr unvollständig und fehlerhaft sind.
- wir haben dann im nächsten Schritt die Problembeschreibung bestätigt und festgestellt, dass es laut Daten tatsächlich einen Umsatzrückgang gab.
- anschließend haben wir vier Hypothesen für den Umsatzrückgang aufgestellt und diese mit Hilfe der Daten überprüft. Die Hypothesen waren:
    1. die Preise sind gesunken
    2. die Nachfrage ist gesunken
    3. das Zahlungsverhalten der Kunden hat sich verändert
    4. die Kundenstruktur hat sich verändert
- wir haben die Hypothesen mit Hilfe von sinnvollen Transformationen (Gruppierungen und Aggregationen) und Visualisierungen überprüft. 
- wir konnten feststellen, dass die ersten beiden Hypothesen zutrafen. Im Zeitverlauf sind die Preise und Mengen tatsächlich gesunken. Jedoch hat uns diese Feststellung keinen Aufschluss darüber gegeben, was der Grund für die Preis- und Mengenänderungen ist.
- wir konnten keinen Zusammenhang zwischen der Zahlungsart und der Umsatzentwicklung entdecken. 
- wir haben dann jedoch festgestellt, dass die Kundenstruktur sich verändert hat. Wir haben mehr Kunden aus der Altersgruppe "unter 40" gewonnen, die weniger oder günstiger kaufen. Dies könnte der Grund für den Umsatzrückgang sein.

> __Fazit:__
> Der Umsatzrückgang ist auf die Veränderung der Kundenstruktur zurückzuführen. Wir haben mehr Kunden aus der Altersgruppe "unter 40" gewonnen, die weniger oder günstiger kaufen.



#### Erkenntnisse gewinnen: Modellieren

Unsere bisherige Analyse basiert auf rein deskriptiven Statistiken. Um unsere Hypothesen zu überprüfen, haben wir unseren Datensatz im Grunde nur beschrieben. Wir haben Daten gruppiert und aggregiert und teilweise für verschiedene Dimensionen (z.B. nach Monat und Zahlungsmethode) visualisiert. Wir konnten dadurch bereits wichtige Erkenntnisse gewinnen. Im betriebswirtschaftlichen Kontext in der Praxis sind diese Analysen meist auch bereits ausreichend. Jedoch ist es oft auch hilfreich und sinnvoll die Daten mit Hilfe von Modellen zu analysieren. Das Modellieren von Daten ist ein wesentlicher Bestandteil von Business Analytics und hat drei wesentliche Vorteile, den es ermöglicht uns:

1. gewonnene Erkenntnisse zu validieren
2. Zusammenhänge und Ursachen für Effekte (besser) zu verstehen
2. Daten in die Zukunft zu prognostizieren

Wir werden an dieser Stelle noch nicht im Detail auf die Modellierung eingehen, sondern stattdessen nur ein kurzes Beispiel geben, um Ihnen einen Eindruck davon zu geben, wie wir mit Hilfe von Modellen Erkenntnisse gewinnen können.

In unserem Zwischenfazit haben wir zusammegefasst, dass der Umsatzrückgang auf die Veränderung der Kundenstruktur zurückzuführen ist. Der Anteil an jüngeren Kunden hat sich vergrößert und diese Kunden kaufen günstiger und weniger.

Lassen Sie uns diese Erkenntnis noch einmal alternativ graphisch darstellen. Wir gruppieren unsere Daten dafür pro Tag (d.h. wir aggregieren einzelne Transaktionen pro Tag) und schauen uns für jeden Tag den durschnittlichen Umsatz sowie das durchschnittliche Kundenalter an.^[Hinweis: wir nehmen hier den `Median`, um einzelnen Ausreißern kein großes Gewicht zu geben. Die Darstellung sähe jedoch sehr ähnlich aus, wenn wir das arithmethische Mittel nähmen.]. Anschließend stellen wir die Daten in einem Streudiagramm dar. Wir sehen, dass es einen Zusammenhang zwischen Umsatz und Alter gibt. Je älter die Kunden sind, desto höher ist der Umsatz. Der Zusammenhang wird durch die Linie, die wir dem Graphen hinzugefügt haben visualisiert. 
```{python}
umsatz_by_alter = df.groupby("Datum").agg({"Umsatz": "median", 
                                           "Alter": "median"})
sns.regplot(x="Alter", y="Umsatz", data=umsatz_by_alter, ci=True, 
            line_kws={"color": "red"}, scatter_kws={"alpha": 0.5});
```

Die Linie ist ein Modell, das die Daten beschreibt. Im vorliegenden Fall handelt es sich um ein lineares Model bzw. eine lineare Funktion. Wir können diese Funktion auch als eine mathematische Gleichung beschreiben. In unserem Fall lautet die Gleichung:

$$
Umsatz = \alpha + \beta \cdot Alter = -28.8 + 3.4 \cdot Alter
$$

Ihnen sollte das Modell bekannt vorkommen, da es sich um ein __lineares Regressionsmodell__ handelt, welches typischerweise zu Beginn des Studiums in einer einführenden Statistikvorlesung behandelt wird. 
Das Ergebnis, d.h. die Werte für die sogenannten Regressionsparamter $\alpha$ und $\beta$ haben wir ebenfalls mit Python berechnet. Die Details sind an dieser Stelle (noch) nicht so wichtig, können jedoch im untenstehenden "Tab-Panel" eingesehen werden. 


::: {.panel-tabset}


### Regression: Code

```{python}
#| output: false
import statsmodels.formula.api as smf
model = smf.ols(formula="Umsatz ~ Alter", data=umsatz_by_alter)
results = model.fit()
results.summary()
```


### Regression: Output


```{python}
#| output: true
#| echo: false
import statsmodels.formula.api as smf
model = smf.ols(formula="Umsatz ~ Alter", data=umsatz_by_alter)
results = model.fit()
results.summary()
```

:::


Das Modell ist nur ein Beispiel für ein Modell, das wir an dieser Stelle verwenden können oder sollten. 

- es kann helfen unsere Erkenntnisse zu validieren: wir könnten dem Modell weitere Variablen hinzufügen und schauen, ob der Zusammenhang zwischen Umsatz und Alter weiterhin Bestand hat und ob dieser robust ist
- es kann helfen Zusammenhänge zu verstehen: wir können das Modell nutzen um zu verstehen, wie sich der Umsatz verändert, wenn wir das Alter der Kunden verändern. Wir können unser Model z.B. wie folgt interpretieren: wenn Kunden im Durchschnitt 1 Jahr älter sind, dann steigt der Umsatz im Durchschnitt um 3,4€. Wir können damit den Effekt der Veränderung der Kundenstruktur auf den Umsatz quantifizieren
- es kann helfen Daten in die Zukunft zu prognostizieren: wir können das Modell nutzen um zu schätzen, wie sich der Umsatz in Zukunft entwickeln wird. Wir können z.B. schätzen, dass der Umsatz nächstes Jahr um x € steigen wird, wenn wir y Jahre ältere Kunden anwerben.^[Hinweis: dies beinhaltet aber viele Annahmen - z.B. dass die Zusammenhänge über die Zeit konstant bleiben oder dass nicht doch andere (versteckte) Faktoren eine Rolle spielen. Wir werden auf diese Aspekte an geeigneter Stelle noch im Detail eingehen.]

