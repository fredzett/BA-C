[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Business Analytics & Coding",
    "section": "",
    "text": "VORWORT\nBei diesem Skript handelt es sich um Selbstlernmaterial zum Thema Datenanalyse. Noch konkreter beschäftigt sich dieses Skript mit Business Analytics. Das Skript wurde neu konzipiert und richtet sich explizit an Studierende der Betriebswirtschaftlehre. Aktuell “atmet” das Dokument noch, d.h. Aktualisierungen und Ergänzungen sind sehr wahrscheinlich. Auch werden perspektivisch fortgeschrittenere Themenblöcke zum Bereich der Predictive Analytics ergänzt werden.\nDas Skript ist explizit mit dem Ziel verfasst, als Selbstlernmaterial verwendet zu werden. Zumindest ist dies beim Verfassen des Skripts immer meine ausdrückliche Intention gewesen. Alle Code-Beispiele können via Knopfdruck selbst ausprobiert und adaptiert werden. Das Dokument ist somit zu Teilen interaktiv und sollte deshalb auch nicht nur passiv konsumiert werden.\nOb mein Vorhaben tatsächlich gelungen ist, können schlussendlich nur Sie beurteilen. Sollten Sie also Fragen oder Anmerkungen bzw. technische Probleme haben oder - und dies bleibt leider nie aus - Fehler entdecken, dann bin ich dankbar für Ihr Feedback. Sprechen Sie mich entweder in den Veranstaltungen zum Modul direkt an oder schreiben mir eine Email (felix.zeidler[at]fh-bielefeld.de). Auch wenn es mir vermutlich nicht immer gelingen wird, Ihnen direkt zu antworten, bin ich dankbar für jede Art von Rückmeldung.\nViel Spaß beim Lesen und Ausprobieren!\nProf. Dr. Felix Zeidler"
  },
  {
    "objectID": "Chapters/01_Chapter/Einleitung.html",
    "href": "Chapters/01_Chapter/Einleitung.html",
    "title": "EINLEITUNG",
    "section": "",
    "text": "In diesm Kapitel beschäftigen wir uns mit drei Kernfragen:\n\n\nWas ist “Business Analytics”?\nWelche Rolle spielt “Coding” in der Datenanalyse?\nWieso Python die geeignete Programmiersprache für unsere Zwecke ist?"
  },
  {
    "objectID": "Chapters/01_Chapter/Was_ist_BA.html#was-ist-business-analytics",
    "href": "Chapters/01_Chapter/Was_ist_BA.html#was-ist-business-analytics",
    "title": "Business Analytics",
    "section": "Was ist Business Analytics?",
    "text": "Was ist Business Analytics?\nBevor wir uns mit Business Analytics inhaltlich weitergehend beschäftigen, müssen wir zunächst definieren, was der Begriff konkret meint. Im Kontext dieser Veranstaltung definieren wir Business Analytics als\n\n“Ein Prozess zur Analyse von Daten mit dem Ziel unternehmerische Entscheidungen zu unterstützen und zu verbessern.”\n\nDer Begriff Business Analytics wird in der Literatur unterschiedlich definiert.1 Für manche Autoren umfasst er alle Formen der Analyse von Unternehmensdaten, während andere eine engere Definition bevorzugen, die sich auf die Verwendung von maschinellen Lernverfahren und anderen fortgeschrittenen Analysemethoden konzentriert. Trotz dieser Unterschiede in der Definition haben alle Ansätze zu Business Analytics eines gemeinsam: Sie zielen darauf ab, durch die Analyse von Daten unternehmerische Entscheidungen zu unterstützen und zu verbessern. Business Analytics ist daher als wichtige Disziplin zu betrachten, die Unternehmen dabei hilft, ihre Leistung zu steigern und ihre Entscheidungen datengestützt zu treffen.1 siehe z.B. Seiter (2019)\nDer Fokus von Business Analytics auf unternehmerische Entscheidungen macht es zu einem wichtigen Thema für kaufmännische Funktionen innerhalb von Unternehmen. Denn gerade in diesen Bereichen werden häufig Entscheidungen getroffen, die den Erfolg und die Leistung des Unternehmens beeinflussen. Business Analytics kann dabei helfen, wichtige Daten und Insights zu sammeln und zu analysieren, um die Entscheidungsfindung zu unterstützen und die Effektivität von Strategien und Maßnahmen zu verbessern. Daher ist es wichtig, dass Führungskräfte und Mitarbeiter in kaufmännischen Funktionen sich mit den Konzepten und Methoden von Business Analytics auseinandersetzen und lernen, wie sie diese in ihrer täglichen Arbeit anwenden können.\nIn der untenstehenden Tabelle 1.1 sind ein paar beispielhafte Anwendungsfälle dargestellt, die verdeutlichen, wie breit die Anwendung von Business Analytics ist:\n\n\nTabelle 1.1: Beispiele für Business Analytics\n\n\n\n\n\n\n\nFunktion\nAnwendungsfall\nBeispiel\n\n\n\n\nMarketing\nWirksamkeit von Marketingkampagnen analysieren und optimieren\nein Unternehmen könnte die Conversion-Rate von Landing Pages oder die Klickrate von Email-Kampagnen analysieren, um zu verstehen, welche Maßnahmen am effektivsten sind\n\n\nFinanzen\nfinanzielle Leistung analysieren und optimieren\nein Unternehmen könnte die Rentabilität von einzelnen Produkten oder Geschäftsbereichen analysieren, um Ressourcen gezielt einzusetzen und die Profitabilität zu erhöhen\n\n\nPersonal\nMitarbeiterleistung analysieren und verbessern\nein Unternehmen könnte Daten zu Mitarbeiterfeedback, Absentismus und Fluktuation analysieren, um die Mitarbeiterzufriedenheit und -fluktuation zu erhöhen\n\n\nLogistik\nLeistung der Lieferkette analysieren und optimieren\nein Unternehmen könnte Daten zu Lieferzeiten, Bestandsniveaus und Transportkosten analysieren, um die Effizienz der Lieferkette zu erhöhen und Lieferprobleme zu minimieren\n\n\n\n\nEs wird außerdem deutlich, dass sich abhängig vom jeweiligen Anwendungsfall auch die verwendeten Daten und Analysetechniken unterscheiden können."
  },
  {
    "objectID": "Chapters/01_Chapter/Was_ist_BA.html#vorteile-durch-business-analytics",
    "href": "Chapters/01_Chapter/Was_ist_BA.html#vorteile-durch-business-analytics",
    "title": "Business Analytics",
    "section": "Vorteile durch Business Analytics?",
    "text": "Vorteile durch Business Analytics?\nAusgehend von der o.g. Definition kann die Datenanalyse auf sowohl strategischer, als auch auf operativer Ebene vorteilhaft sein.\nAuf operativer Ebene kann Der Einsatz von Business Analytics vorteilhaft sein, da er es Unternehmen ermöglicht, Daten zu sammeln und zu analysieren, um z.B. ihre Prozesse zu optimieren und/oder Kosten zu senken. Auf Basis dieser Verbesserungen kann man sich vom Wettbewerb unterscheiden und absetzen. Der Einsatz von Business Analytics kann auf strategischer Ebene vorteilhaft sein, da er es Unternehmen ermöglicht, Trends zu erkennen und auf sie zu reagieren, um sich einen Wettbewerbsvorteil zu verschaffen. Die Analyse von Daten kann Unternehmen dabei helfen, tiefgreifende Einblicke in die Märkte und Kundenbedürfnisse zu gewinnen und diese Informationen zu nutzen, um ihre Strategien anzupassen und sich von ihren Wettbewerbern abzuheben. Der Einsatz von Business Analytics kann somit dazu beitragen, dass Unternehmen ihre Wettbewerbsposition verbessern und ihre Leistung steigern.\nSo ist es nicht verwunderlich, dass es auch Belege dafür gibt, dass Unternehmen durch den Einsatz von Business Analytics erfolgreicher sind. So zeigen z.B. Shanks u. a. (2010) theoretisch auf, dass Business Analytics einen Einfluss auf die Strategie und die Performance von Unternehmen hat. Die vergleichende empirische Analyse von Popovič u. a. (2018) betont hingegen, dass Unternehmen, die hohen “Business Analytics”-Fähigkeiten haben, in der Lage sind bessere Entscheidungen zu treffen und so einen höheren Unternehmenswert generieren. In einer weiteren empirischen Analyse zeigen Almazmomi, Ilmudeen, und Qaffas (2021), dass der erhöhte Einsatz von Business Analytics einen Wettbewerbsvorteil darstellt."
  },
  {
    "objectID": "Chapters/01_Chapter/Was_ist_BA.html#drei-arten-der-datenanalyse",
    "href": "Chapters/01_Chapter/Was_ist_BA.html#drei-arten-der-datenanalyse",
    "title": "Business Analytics",
    "section": "Drei Arten der Datenanalyse",
    "text": "Drei Arten der Datenanalyse\nDas Feld von Business Analytics ist sehr weit. Es macht deshalb Sinn, das breite Themengebiet zu unterteilen. Wir werden im Rahmen dieses Kurses Business Analytics in die folgenden drei Analyse-Kategorien unterteilen:\n\ndeskriptive Analyse\ndiagnostische Analyse\nprädiktive Analyse\n\nIch gebe zu: die Unterteilung ist ein Stück weit beliebig und auch nicht MECE (mutual exclusive, collectively exhaustive). Ich halte Sie aus didaktischen Gründen dennoch geeignet sich dem breiten Themengebiet Business Analytics Schritt für Schritt zu nähern.22 Für eine ausführlichere Diskussion der unterschiedlichen Arten von Business Analytics siehe z.B. Gluchowski (2016).\nDie deskriptive Analytik ist die Art von Business Analytics, die sich auf die Vergangenheit konzentriert. Sie zielt darauf ab, ein besseres Verständnis dafür zu entwickeln, was in der Vergangenheit passiert ist, indem sie Daten sammelt und analysiert. Zum Beispiel könnte ein Unternehmen die Verkaufszahlen der vergangenen Jahre analysieren, um herauszufinden, welche Produkte am beliebtesten waren und wie sich die Verkäufe im Laufe der Zeit entwickelt haben. Die deskriptive Analytik kann dazu beitragen, Muster und Trends zu erkennen und die Leistung des Unternehmens besser zu verstehen.\nDie diagnostische Analytik geht einen Schritt weiter und versucht, die Ursachen für bestimmte Ereignisse oder Muster zu untersuchen. Sie nutzt Vergangenheitsdaten und bewährte statistische Verfahren (z.B. lineare Regression), um Muster und Trends zu identifizieren und die Gründe für bestimmte Ereignisse oder Muster zu erklären. Zum Beispiel könnte ein Unternehmen die diagnostische Analytik nutzen, um herauszufinden, warum bestimmte Kunden häufiger Produkte zurückgeben oder warum die Umsätze in bestimmten Filialen niedriger sind als in anderen.\nDie prädiktive Analytik geht noch einen Schritt weiter und versucht, die Zukunft vorherzusagen. Sie nutzt Vergangenheitsdaten, bewährte statistische Verfahren und teilweise auch Verfahren des maschinellen Lernens, um Muster und Trends zu identifizieren und Vorhersagen für zukünftige Ereignisse zu treffen. Zum Beispiel könnte ein Unternehmen die prädiktive Analytik nutzen, um zu prognostizieren, wie sich die Nachfrage nach einem bestimmten Produkt in der Zukunft entwickeln wird, oder um Kundenverhalten vorherzusagen, um gezielte Marketingkampagnen zu erstellen.\nJede dieser Arten von Business Analytics kann Unternehmen dabei helfen, bessere Entscheidungen zu treffen. Oft werden die Analyseformen auch kombiniert bzw. es wird im Rahmen einer Analyse gar nicht unterschieden, um welche Kategorie es sich handelt. Im Rahmen des Moduls werden wir uns allen drei Arten widmen und uns Schritt für Schritt auch (vermeintlich) komplexen Analysen widmen."
  },
  {
    "objectID": "Chapters/01_Chapter/Was_ist_BA.html#sec-analyseprozess",
    "href": "Chapters/01_Chapter/Was_ist_BA.html#sec-analyseprozess",
    "title": "Business Analytics",
    "section": "Der Analyseprozess",
    "text": "Der Analyseprozess\nEingangs des Kapitels haben wir Business Analytics definiert und dabei festgehalten, dass es sich um einen Prozess handelt. Lassen Sie uns an dieser Stelle den Prozess der Analyse kurz beschreiben. Denn auch wenn dieser sich im Detail bei jeder Analyse natürlich unterscheidet, sind die grundsätzlichen Analyseschritte ganz unabhängig von der Art der Analyse und dem Analysezweck immer identisch. Die wesentlichen Prozessschritte lauten:\nDer Datenanalyse-Prozess umfasst eine Reihe von Schritten, die dazu dienen, ein bestimmtes Analyseproblem zu lösen. Die Schritte sind in der Regel untereinander abhängig und müssen in der richtigen Reihenfolge ausgeführt werden, um zu sinnvollen Ergebnissen zu gelangen.\n\nFormulierung der Problemstellung: Der erste Schritt bei der Datenanalyse ist die Definition des Analyseproblems. Dabei geht es darum, die Frage oder das Problem zu formulieren, das mit der Analyse beantwortet oder gelöst werden soll. Zudem muss festgelegt werden, welche Daten dazu benötigt werden und wo diese gefunden werden können. Beispielsweise könnte das Analyseproblem lauten: “Welche Faktoren beeinflussen die Kundenzufriedenheit in unserem Unternehmen?” Um dieses Problem zu lösen, müssen Daten zu Kundenzufriedenheit und möglichen Einflussfaktoren gesammelt werden.\nFinden und Einlesen der Daten: Nachdem das Analyseproblem definiert wurde, müssen die benötigten Daten gefunden und eingelesen werden. Diese können entweder aus internen Quellen, wie beispielsweise einer Unternehmensdatenbank, oder aus externen Quellen, wie öffentlich zugänglichen Datensätzen oder Daten, die von Kunden oder anderen Stakeholdern bereitgestellt werden, stammen. Es ist wichtig, sicherzustellen, dass die Daten korrekt und vollständig sind und dass alle relevanten Informationen enthalten sind.\nAufbereiten der Daten: Sobald die Daten eingelesen wurden, müssen sie aufbereitet werden. Dieser Schritt beinhaltet die Säuberung und Strukturierung der Daten, damit sie für die weitere Analyse nutzen können. Dazu gehört beispielsweise das Entfernen von fehlerhaften oder inkonsistenten Daten, das Umcodieren (z.B. ja/nein zu 1/0), die Umbennung von Spalten. Kurzum: Es geht darum, die Daten so aufzubereiten, dass sie für die Analyse nutzbar sind.\nTransformieren der Daten: Mit diesem Schritt beginnt der eigentliche Erkenntnisprozess, d.h. wir beginnen Daten zu analysierem, um daraus Erkenntnisse zu ziehen und Dinge zu lernen. Dafür werden z.B. aus bestehenden Daten neue Daten berechnet oder wir aggregiern, gruppieren und filtern Daten, um Erkenntnisse zu generieren. Wir transformieren den bestehenden Datensatz mit dem Ziel neue Informationen zu generieren, die uns bei der Beantwortung unserer Problemstellung helfen.\nVisualisieren der Daten: die Visualisierung von Daten geht oft mit der der Transformation (und auch mit der Modellierung) einher. Die Visualisierung hilft uns, Muster und Zusammenhänge zu erkennen und Ergebnisse zu veranschaulichen. Es gibt verschiedene Möglichkeiten, Daten zu visualisieren, wie beispielsweise Tabellen, Diagramme oder Karten. Das Ziel ist es, die Daten so darzustellen, dass sie leicht verständlich und interpretierbar sind.\nModellieren der Daten: In diesem Schritt werden Mathematische Modelle erstellt, um die Daten zu analysieren und Vorhersagen zu treffen. Dazu können beispielsweise Regressionsanalysen oder Klassifikationsmodelle verwendet werden. Das Ziel ist es, Zusammenhänge und Muster in den Daten zu erkennen und Vorhersagen für die Zukunft zu treffen.\nKommunizieren der Daten: Zum Schluss müssen die Ergebnisse der Datenanalyse kommuniziert werden. Dies kann in Form von Berichten, Präsentationen oder anderen Dokumenten geschehen, die die Ergebnisse verständlich und nachvollziehbar darstellen. Das Ziel ist es, die Ergebnisse der Analyse der relevanten Stakeholder zugänglich zu machen und sie in die Entscheidungsfindung einzubeziehen.\n\nDie folgende Darstellung soll den Analyseprozess in Anlehnung an Wickham und Grolemund (2016) abbilden. Die Schritte 4, 5 und 6 bezeichnen wir auch als explorative Analyse. Damit soll betont werden, dass es meist nicht um einen rein sequenziellen Prozess handelt, sondern die Schritte oft iterativ durchlaufen werden.\n\n\n\nDer Analyse-Prozess\n\n\nDie Abbildung verdeutlicht, dass es sich beim Analyse-Prozess um einen iterativen und teilweise explorativen Prozess handelt. Die Schritte “Transformation”, “Visualisierung” und “Modellierung” sind häufig iterative Prozessschritte, bei denen man auch explorativ vorgeht. Das bedeutet auch, man sich bewusst die Freiheit nimmt, unterschiedliche Verfahren auszuprobieren, um neue Erkenntnisse zu gewinnen oder dass man offen für neue Ideen und Ansätze bleibt und sich nicht zu früh auf eine bestimmte Vorgehensweise festlegt. Durch die iterative Durchführung dieser Schritte und das explorative Vorgehen kann man neue Erkenntnisse gewinnen und die Analyse vertiefen.\nZudem zeigt sich, dass die Schritte “Transformation”, “Visualisierung” und “Modellierung” im Datenanalyse-Prozess nicht unabhängig voneinander betrachtet werden können, sondern dass sie sich gegenseitig beeinflussen und bedingen. Beispielsweise könnte es bei der Transformation der Daten notwendig sein, mehrere Veränderungen an den Daten vorzunehmen, um sie für die geplante Analyse geeignet zu machen. Durch die Visualisierung der Daten kann es jedoch möglich sein, neue Muster oder Zusammenhänge zu erkennen, die dazu führen, dass die Daten anders transformiert werden müssen. Ähnlich verhält es sich bei der Modellierung der Daten. Hier können verschiedene Modelle verglichen und iterativ verbessert werden, um die besten Vorhersagen zu erhalten. Durch die Visualisierung der Ergebnisse kann es jedoch möglich sein, dass neue Erkenntnisse gewonnen werden, die dazu führen, dass das Modell anders aufgebaut werden muss. Es ist daher wichtig, dass diese Schritte nicht unabhängig voneinander betrachtet werden, sondern dass man sich bewusst die Freiheit nimmt, explorativ vorzugehen und die Schritte iterativ durchzuführen, um zu sinnvollen Ergebnissen zu gelangen.\n\n\n\n\nAlmazmomi, Najah, Aboobucker Ilmudeen, und Alaa A. Qaffas. 2021. „The impact of business analytics capability on data-driven culture and exploration: achieving a competitive advantage“. Benchmarking: An International Journal 29 (4): 1264–83. https://doi.org/10.1108/BIJ-01-2021-0021.\n\n\nGluchowski, Peter. 2016. „Business Analytics – Grundlagen, Methoden und Einsatzpotenziale“. HMD Praxis der Wirtschaftsinformatik 53 (3): 273–86. https://doi.org/10.1365/s40702-015-0206-5.\n\n\nPopovič, Aleš, Ray Hackney, Rana Tassabehji, und Mauro Castelli. 2018. „The impact of big data analytics on firms’ high value business performance“. Information Systems Frontiers 20 (2): 209–22. https://doi.org/10.1007/s10796-016-9720-4.\n\n\nSeiter, Mischa. 2019. Business Analytics: Wie Sie Daten für die Steuerung von Unternehmen nutzen. 2., komplett überarbeitete und erweiterte. München: Vahlen.\n\n\nShanks, Graeme, Rajeev Sharma, Peter Seddon, und Peter Reynolds. 2010. „The Impact of Strategy and Maturity on Business Analytics and Firm Performance: A Review and Research Agenda“. ACIS 2010 Proceedings, Januar. https://aisel.aisnet.org/acis2010/51.\n\n\nWickham, Hadley, und Garrett Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. \"O’Reilly Media, Inc.\"."
  },
  {
    "objectID": "Chapters/01_Chapter/Coding.html#warum-programmieren-hilfreich-ist",
    "href": "Chapters/01_Chapter/Coding.html#warum-programmieren-hilfreich-ist",
    "title": "Werkzeug: Coding!",
    "section": "Warum Programmieren hilfreich ist",
    "text": "Warum Programmieren hilfreich ist\nWir glauben, dass die Fähigkeit zu Programmieren eine Grundlagenkompetenz ist, die jeder haben sollte. Diese Fähigkeit ist insbesondere, aber nicht nur, für die Datenanalyse hilfreich. Aus unserer Sicht gibt es drei Kernargumente für die Einführung von Programmierkenntnissen, denn Programmieren hilft:\n\nDaten effizient für Entscheidungsunterstützung aufbereiten und analysieren zu können\nrepetitive Aufgaben zu automatisieren\nProblemlösungsfähigkeiten zu verbessern\n\nLassen Sie uns die drei Punkte genauer betrachten.\n\nDaten effizient aufbereiten und analysieren\nProgrammierkenntnisse sind bisher kein Muss für BWLer. Jedoch verändert sich der Arbeitsalltag rasant. Die Analyse von Daten und Informationen zur Entscheidungsunterstützung ist immer eine Kernaufgabe in kaufmännischen Bereichen gewesen. Diese Aufgabe verändert sich aufgrund der verfügbaren Datenmengen, die für potentielle Analysen zur Verfügung stehen. Die Fähigkeit Daten effizient aufzubereiten und zu analysieren wird deshalb wichtiger. Programmierkenntnisse helfen hier, diesen Datenaufbereitungs- und analyseprozess zu beschleunigen und teilweise überhaupt erst zu ermöglichen.\nWarum nicht Excel?\nNun mag an dieser Stelle der Einwand kommen, dass es bereits ein Werkzeug dafür gibt, welches täglich von vielen genutzt wird: Excel (oder ein anderes Tabellenkalkulationsprogramm). In vielen Bereichen wir Excel seit Jahrzehnten für die Datenaufbereitung und Analyse mehr oder weniger sinnvoll eingesetzt. Warum also kein Kurs “Business Analytics mit Excel”? Der Hauptgrund ist, dass Excel nicht für die Analyse und insbesondere Aufbereitung von sehr großen Datenmengen entwickelt wurde. Große Datenmengen lassen sich wesentlich besser mit geeignetem “Skripten” bearbeiten. Zum einen, weil diese wesentlich schneller und stabiler in der Ausführung sind. Zum anderen weil durch die Programmierung eine klare Trennung zwischen Daten und Analyse gemacht wird. Diese Trennung gibt es in Excel nicht, da jede Tabelle typischerweise Daten und Analyselogik kombiniert. Dieses Vorgehen hat einen großen Vorteil - es unterstützt die explorative Analyse - jedoch erschwert es Dritten den Aufbereitungs- und Analyseprozess nachzuvollziehen. Da wir jedoch davon ausgehen, dass die meisten Leser*innen dieses Skriptes Excel beherrschen, arbeiten wir oft mit Excel-Analogien und Einführungsbeispielen.\nWarum nicht Business Intelligence Software?\nFür die Analyse und Aufbereitung von großen Datenmengen gibt es seit einigen Jahren gängige BI-Software (z.B. Microsoft Power BI oder Tableau). Auch diese Tools sind gut nutzbar und potentiell hilfreich für die Datenanlyse. Dennoch glauben wir, dass es wesentliche Argumente dafür gibt, diesen Kurs zu flankieren mit einer Einführung in die Programmierung.\nZum einen ist es so dass Business Intelligence Tools (BI-Tools) sich zwar wunderbar dazu eignen Visualisierungen vorzunehmen und Dashboard zu erstellen. In der Praxis ist es jedoch typischerweise so, dass wir die Daten, die visualisiert werden sollen zunächst aufbereiten müssen. Eine große Herausforderung ist es also typischerweise Daten aufzubereiten. Damit sind nicht nur die Eliminierung von Fehlern und das Angleichen von Formaten gemeint, sondern es geht insbesondere oft auch darum, eine Datenstruktur zu finden,die für eine Visualisierung geeignet ist. Natürlich sind BI-Tools in der Lage, diese Bereinigungen und Formatveränderungen vorzunehmen. In der Praxis stellt sich jedoch oft heraus, dass diese “no Code”-Lösungen teilweise nichts praktikabel bzw nicht komfortabel sind. Es ist deshalb nicht verwunderlich, dass gängige BI-Tools eine Schnittstelle zu Programmiersprachen bereitstellen, die insbesondere für Datenanalyse und Datenaufbereitung geeignet sind (also z.B Python oder R).\nInsofern sehen wir den Einsatz der Programmierung nicht als Alternative zu Nutzung von BI-Tools oder Excel, sondern vielmehr als sehr sinnvolle Ergänzung. Wir möchten Sie damit befähigen ein weiteres und aus unserer Sicht besser geeignetes Werkzeug zu nutzen, um Daten aufzubereiten und zu analysieren. Sie können selber entscheiden, ob Sie diese Werkzeug als sinnvolle Ergänzung zu Excel und BI-Tools nutzen.\n\n\nAutomatisierung von repetitiven Aufgaben\nDie Diskrepanz zwischen technischen Möglichkeiten und unternehmerischer Realität ist oft groß. Schaut man sich Arbeitsabläufe in Unternehmen an, so stellt man fest, dass diese - trotz anderer technischer Möglichkeiten - oft durch manuelle Schnittstellenwechsel unterbrochen werden. Dateien werden manuell heruntergeladen und geöffnet und dann mit anderen Dateien zusammengeführt, bevor das Ergebnis dann per Email weitergeschickt wird, um dann wieder manuell geöffnet und mit anderen Daten verknüpft zu werden. Für diese Brüche gibt es natürlich “große” Lösungen. Diese bedingen jedoch oft den Erwerb einer neuen Standardsoftware sowie die Veränderung von unternehmensinternen Abläufen. Auch wenn diese “große” Lösung in der Theorie oft die wirtschaftlichste ist, dauert es - wenn überhaupt - Jahre bis zur Einführung, weil Investition gescheut und ein “weiter so” scheinbar einfacher ist. Die Alternative zur großen Lösung muss jedoch nicht das “weiter so” sein. Bereits geringe Programmierkenntnisse ermöglichen die (zumindest teilweise) Automatisierung der oben beschriebenen Brüche. Programmierkenntnisse helfen dabei, Potentiale für “kleine Lösungen” zu identifizieren und sogar selber zu implementieren. Letzteres ist aber gar nicht unbedingt von Nöten, da bereits das Erkennen von Automatisierungspotentialen eine Diskussion mit IT-Experten anstoßen kann, die sonst nicht geführt worden wäre. Die Identifikation von Verbesserungspotentialen in Arbeitsabläufen benötigt Experten, die diese Abläufe und Prozesse kennen (d.h. Fachexperten wie Sie) und wird typischerweise nicht von außen angestoßen.\n\n\nProblemlösungsfähigkeit verbessern\nSchließlich hilft die Fähigkeit zu programmieren, komplexe Probleme besser zu verstehen und zu lösen. Programmieren ist ein Prozess zum Erstellen von Algorithmen, bei denen es sich um eine Reihe von Anweisungen handelt, die ein Computer befolgen muss. In der Wirtschaft sind Studierende oft an komplexen Entscheidungen beteiligt, was die Fähigkeit erfordert, komplexe Probleme zu verstehen und zu lösen. Programmieren kann dabei helfen, indem es den Studierenden beibringt, wie man ein Problem in kleinere Stücke zerlegt und dann einen Schritt-für-Schritt-Plan erstellt, um es zu lösen."
  },
  {
    "objectID": "Chapters/01_Chapter/Coding.html#programmieren-software-entwicklung-vs.-coding",
    "href": "Chapters/01_Chapter/Coding.html#programmieren-software-entwicklung-vs.-coding",
    "title": "Werkzeug: Coding!",
    "section": "Programmieren: Software-Entwicklung vs. Coding",
    "text": "Programmieren: Software-Entwicklung vs. Coding\nEs besteht kein Zweifel daran, dass die Fähigkeit zu Programmieren wertvoll ist. Jedoch wollen wir an dieser Stelle kurz darauf eingehen, was mit “Programmieren” eigentlich konkret gemeint ist.\nKeines der drei genannten Argumente bedingt, dass Sie zu Softwareentwicklern werden. Softwareentwicklung ist ein hochspezialisiertes Gebiet, das eine jahrelange Ausbildung (ggf. auch ein Informatikstudium) und Erfahrung erfordert. Programmieren hingegen ist eine relativ einfache Fähigkeit, die innerhalb weniger Wochen erlernt werden kann.33 Anmerkung: jedoch bedarf es - wie bei jeder anderen Sache - auch viel Übung, um gut darin zu werden. \nHier besteht ein weit verbreitetes Missverständnis, bei dem viele die Fähigkeit zu Programmieren mit der spezialisierten Funktion oder Aufgabe verwechseln, die normalerweise von Personen mit Informatikhintergrund übernommen werden.\nEine Analogie: jeder von uns lernt in der Schule zu schreiben. Dennoch können (oder wollen) nur wenige von uns Romanautoren werden. Um Romanauthr zu werden, müssen wir schreiben können. Jedoch erwerben wir die Fähigkeit zu schreiben nicht, weil wir Romanautoren werden wollen oder sollen. Vielmehr handelt es sich beim Schreiben um eine Grundkompetenz, die wir für viele Arten der Kommunikation erwerben sollten.\nWir argumentieren also, dass Ihnen eine Teilmenge einer breiten Palette von Programmierkenntnissen beigebracht werden sollte. Dabei meinen wir die Grundkompetenz - in unserem Falle - für den Anwendungszweck der Datenanalyse. Um diese Verwechslungsgefahr zu vermeiden, sprechen wir von nun an von Coding, wenn wir von der Untergruppe von Programmierkenntnissen sprechen, die Sie erlernen werden."
  },
  {
    "objectID": "Chapters/01_Chapter/Coding.html#coden-in-zeiten-von-ki-tools",
    "href": "Chapters/01_Chapter/Coding.html#coden-in-zeiten-von-ki-tools",
    "title": "Werkzeug: Coding!",
    "section": "Coden in Zeiten von KI-Tools?",
    "text": "Coden in Zeiten von KI-Tools?\nNun mögen einige von Ihnen anmerken, dass es in Zeiten von immer besser werdenden KI-Tools (z.B. ChatGPT) keinen Bedarf mehr für die Fähigkeit zu Programmieren gibt. Dies mag in (vielleicht nicht mehr allzu) ferner Zukunft der Fall sein. Aktuell argumentieren wir jedoch, dass es gerade in Zeiten von KI-Tools sinnvoll ist, sich die Grundkompetenz Coden anzueignen. Es ist richtig, dass Tools wie ChatGPT in der Lage sind, Code auf Grundlage von natürlichsprachlichen Anweisungen zu schreiben.\n\n\n\nChatGPT\n\n\nAllerdings gibt es dennoch gute Gründe, warum es sinnvoll ist, Coden zu lernen, selbst wenn solche Tools zur Verfügung stehen.\nEs ist gerade erst für jemanden, der in der Lage ist, Code zu schreiben und zu verstehen, besonders sinnvoll, ChatGPT einzusetzen. Dies liegt daran, dass ChatGPT, wie jedes andere künstliche Intelligenz-System auch, Fehler machen kann (und auch tatsächlich macht). Wenn man jedoch in der Lage ist, Code zu lesen und zu verstehen, ist es einfacher, diese Fehler zu identifizieren und zu korrigieren und die (teilweise falschen) Lösungsvorschläge produktiv zu nutzen. ChatGPT kann außerdem dabei helfen, komplexe Programme schneller zu schreiben, indem es mögliche Lösungen vorschlägt oder Ihnen bei “logischen Blockaden” Lösungswege aufzeigt - selbt wenn diese teilweise falsch sein sollten. Auch dies funktioniert jedoch nur, wenn man bereits in der Lage ist, Code zu schreiben und seine komplexen Probleme gut in strukturierte Codeblöcke zu übersetzen, um von dieser Funktionalität profitieren zu können. Kurz gesagt, ChatGPT (und viele weitere KI-Tools) kann eine (sehr!) nützliche Unterstützung darstellen, wenn man bereits über Kenntnisse im Programmieren verfügt, während Personen ohne diese Kenntnisse wenig Nutzen aus dem Tool ziehen können.\nInsofern möchten wir Sie auch ermutigen und anregen, sich mit diesen KI-Tools zu beschäftigen und diese auch im Rahmen dieses Moduls für sich zu nutzen. Wir glauben, dass die Aussagen von McAfee und Brynjolfsson (2017) nun tatsächlich eintreffen: KI zerstört nicht notwendigerweise Ihren Job, sondern es stellt für diejenigen ein Risiko dar, die KI für sich nicht sinnvoll einsetzen.\nNutzen Sie die Ihnen zur Verfügung stehenden Mittel, um Ihre Fähigkeiten zu erweitern und zu verbessern. Seien Sie sich nur bewusst, dass KI Sie “nur” unterstützt, Ihnen aber nicht die Fähigkeit zum Programmieren ersetzen wird. Zumindest noch nicht…\n\n\n\n\nMcAfee, Andrew, und Erik Brynjolfsson. 2017. Machine, platform, crowd: harnessing our digital future. First edition. New York: W.W. Norton & Company."
  },
  {
    "objectID": "Chapters/01_Chapter/Warum_Python.html#python-ist-populär",
    "href": "Chapters/01_Chapter/Warum_Python.html#python-ist-populär",
    "title": "Warum Python?",
    "section": "Python ist populär",
    "text": "Python ist populär\nEin Entscheidungskriterium ist die Popularität. Python hat seit seiner Erfindung in den 90er Jahren enorm an Beliebtheit gewonnen und wird aktuell von sehr vielen Softwareentwicklern und Datenanalysten genutzt und ist im Ranking der beliebtesten Programmiersprachen2 mittlerweile auf Platz 1, d.h. auch vor Java oder C.2 Methodisch ist nicht eindeutig zu bestimmen, welche Programmiersprache die beliebteste ist. Insofern gibt es verschiedene Rankings. Hier wurde ein bekanntes Ranking ausgewählt. Es gibt jedoch auch andere Rankings. In diesen ist Python nicht immer auf Platz 1, aber in den meisten Fällen auf den ersten drei Plätzen zu finden.\n\n\n\n\n\n\nPopularität verschiedener Programmiersprachen\n\n\n\nEin Ranking der beliebtesten Programmiersprachen ist z.B. das Tiobe-Ranking. Dieses Ranking wird monatlich aktualisiert und basiert auf der Anzahl der Suchanfragen in Suchmaschinen.\n\n\nEine Programmiersprache kann gut oder schlecht sein; ganz unabhängig von ihrer Popularität. Dennoch ist die Popularität aus unserer Sicht ein sehr wichtiges Kriterium.\nZum einen ist es wesentlich einfacher Unterstützung zu finden, wenn man ein bestimmtes Problem in Python nicht lösen kann. Im Rahmen dieses Kurses werden Sie auf Programmierprobleme stoßen:\n\nIhr Code produziert Fehlermeldungen,\nSie wissen nicht mehr, wie die geeignete Funktion zum Visualisieren von Balkencharts ist oder\nIhnen fehlt der Ansatz, wie Sie ein Problem konkret angehen sollen.\n\nSo gibt es unzählige Lehrbücher und -tutorials, die einem beim Erlernen der Programmiersprachen helfen. Aus unserer Sicht jedoch noch wichtiger: es gibt eine sehr große Online-Community (z.B. Stackoverflow), die bei Fragen unterstützen kann und KI-Tools (z.B. ChatGPT) bieten deutlich bessere Unterstützung für populäre Programmiersprachen, da diese im Gegensatz zu weniger populären Sprachen deutlich mehr Daten zur Verfügung haben.\nZum anderen sorgt die Popularität von Python für eine praktische Relevanz in Unternehmen. Auch wenn Sie in Ihrem zukünftigen Job vielleicht nicht programmieren werden (müssen), ist es dennoch hilfreich zu wissen, dass Python mit hoher Wahrscheinlichkeit in Ihrem zukünftigen Unternehmen bereits genutzt wird. Selbst wenn dies nicht der Fall ist, lässt sich die IT-Abteilung leicht(er) überzeugen, eine bekannte Programmiersprache zu installieren, als eine unbekannte."
  },
  {
    "objectID": "Chapters/01_Chapter/Warum_Python.html#python-ist-einfacher",
    "href": "Chapters/01_Chapter/Warum_Python.html#python-ist-einfacher",
    "title": "Warum Python?",
    "section": "Python ist einfach(er)",
    "text": "Python ist einfach(er)\nDie grundlegenden Konzepte einer Programmiersprache sind oft sehr ähnlich und Programmieren lernen erfordert - wie jede andere Tätigkeit - Zeit und Erfahrung. Dennoch unterscheiden sich Programmiersprachen oft in Ihrer Komplexität für Anfänger. So gibt es Programmiersprachen, die darfür bekannt sind, sehr schwer erlernbar zu sein (z.B. Rust). Andere Programmiersprachen gelten als eher einfach zu erlernen. Python gilt als eine eher einfach zu erlernende Programmiersprache. Dies bedeutet nicht, dass Python einfach per se ist. Vielmehr ist damit oft die Syntax der Sprache gemeint, d.h. welche Begriffe und Worte fehlerfreie Programme liefen. Darüber hinaus sind andere Dinge - wie z.B. die Art der Typisierung - wichtig.\nBeispiel: stellen Sie sich vor, wir möchten das arithmetische Mittel einer Zahlenreihe berechnen (engl. mean).\nSchauen wir uns an, wie wir dies in Rust und Python umsetzen können.3 Klicken Sie auf die jeweiligen Tabs, um die Beispiele zu sehen.3 Beide Beispiele sind hier entnommen und im Falle für Python leicht adaptiert.\n\nRustPython\n\n\nfn sum(arr: &[f64]) -> f64 {\n    arr.iter().fold(0.0, |p,&q| p + q)\n}\n\nfn mean(arr: &[f64]) -> f64 {\n    sum(arr) / arr.len() as f64\n}\n\nfn main() {\n    let v = &[2.0, 3.0, 5.0, 7.0, 13.0, 21.0, 33.0, 54.0];\n    println!(\"mean of {:?}: {:?}\", v, mean(v));\n\n    let w = &[];\n    println!(\"mean of {:?}: {:?}\", w, mean(w));\n}\n\n\nfrom statistics import mean\nm = mean([2.0, 3.0, 5.0, 7.0, 13.0, 21.0, 33.0, 54.0])\nprint(m)\n\n\n\nWelche Sprache finden Sie intuitiver oder einfacher zu lesen? Die meisten Leser*innen werden das Beispiel in Python wegen der intuitiven Syntax einfacher finden. Auch wenn komplexe Programme in Python ähnlich komplex werden (können), wie in jeder anderen Programmiersprache, hat diese einfache(re) Syntax einen großen Vorteil: Sie werden zu Beginn schneller Fortschritte machen und können bereits nach kurzer Zeit praxisrelevante Skripte schreiben."
  },
  {
    "objectID": "Chapters/01_Chapter/Warum_Python.html#python-ist-datenanalyse",
    "href": "Chapters/01_Chapter/Warum_Python.html#python-ist-datenanalyse",
    "title": "Warum Python?",
    "section": "Python ist Datenanalyse",
    "text": "Python ist Datenanalyse\nEin Grund für die große Popularität und insbesondere das starke Wachstum von Python ist, dass Python insbesondere auch im Bereich der Datenanalyse eingesetzt wird. So hat sich Python als eine der weit verbreitetsten Sprachen im Bereich Datenaufbereitung, Machinelles Lernen und Deep Learning entwickelt. Durch die einfache Syntax ist Python sehr gut geeignet, um schnell Prototypen für komplexe Datenanalysethemen zu erstellen. Dies hat dazu geführt, dass in den letzten Jahren eine Vielzahl von Modulen und Packages (d.h. Bibliotheken, die die Standardsprache erweitern) entstanden sind. Diese Add-ons, sind teilweise von großen Unternehmen, wie Google oder Facebook, (mit)entwickelt worden und sind frei verfügbar. Die Lösung von komplexen Datenanalysethemen ist insofern durch die Vielzahl an geeigneten Hilfsmitteln sehr viel einfacher und mächtiger geworden und erfordert (teilweise) keine jahrelange Programmiererfahrung. Zusatzmodule wie pandas, numpy, matplotlib oder scikit-learn - diese werden Sie in den folgenden Kapiteln noch kennenlernen - haben Python zu einer Art Schweizer Taschenmesser der Datenanalyse - insbesondere auch für Programmieranfänger - gemacht."
  },
  {
    "objectID": "Chapters/01_Chapter/Warum_Python.html#python-ist-allzweckwaffe",
    "href": "Chapters/01_Chapter/Warum_Python.html#python-ist-allzweckwaffe",
    "title": "Warum Python?",
    "section": "Python ist Allzweckwaffe",
    "text": "Python ist Allzweckwaffe\nAuch andere Sprachen sind für das Thema Datenanalyse sehr geeignet; insbesondere R ist in den Bereichen Aufbereitung von Daten und statistischer Analyse führend. Jedoch hat Python einen Vorteil gegenüber einer Sprache wie R: Python ist eine sogenannte “all purpose programming language”, d.h. Python kann auch andere Dinge sehr gut. So wird Python auch zur Entwicklung von Software und Webapps oder Automatisierung von Prozessen genutzt. Der Einsatzzweck ist im Grunde nicht beschränkt. Im Rahmen dieses Kurses erscheint mir dies als Vorteil, da Sie als Einsteiger so in den Genuss einer Programmiersprache kommen, deren Einsatzzweck Sie für sich persönlich beliebig erweitern können. Das so vermittelte Programmierwissen kann so also zukünftig - sofern tatsächlich weitergehendes Interesse besteht - breit eingesetzt werden."
  },
  {
    "objectID": "Chapters/02_Chapter/Installation.html#grundlagen",
    "href": "Chapters/02_Chapter/Installation.html#grundlagen",
    "title": "Installation & Setup",
    "section": "Grundlagen",
    "text": "Grundlagen\nBevor wir uns inhaltlich in die Welt der Datenanalyse begeben, müssen wir uns zunächst mit der technischen Umgebung beschäftigen, in der wir unsere Analysen durchführen werden. Wir müssen uns also zunächst mit der Frage beschäftigen, wie wir Python nutzen können. Bis vor wenigen Jahren, war dies eine recht komplizierte Angelegenheit. Heute ist es jedoch sehr einfach, Python zu nutzen.\nPrinzipiell benötigen wir zwei Dinge, um Python nutzen zu können:\n\nEin Programm, in dem wir unseren Python-Code schreiben\nEin Programm, mit dem wir unseren Python-Code ausführen können\n\n\nProgramme, um Python-Code zu schreiben\nPython kann in verschiedenen Arten von Programmen geschrieben werden, jedes mit seinen eigenen Vor- und Nachteilen.\nEinfache Texteditoren: prinzipiell können Sie in jedem einfachen Texteditor Python (oder auch anderen) Code schreiben. Beispiele für einfache Texteditoren sind z.B. Notepad++. Auch wenn es möglich ist, Python-Programme in einem solchen Texteditor zu schreiben, ist dies nicht besonders effizient oder komfortabel, da einfache Texteditoren keine Syntaxhervorhebung oder Code-Formatierung bieten bzw. andere hilfreiche Funktionen, die für das Schreiben von Python-Code nützlich sind.\nSpezielle Texteditoren: Spezielle Texteditoren sind in der Regel leistungsfähiger als einfache Texteditoren und bieten zusätzliche Funktionen, die speziell für das Schreiben von Programm-Code benötigt werden (z.B. Syntaxhervorhebung, Debugging, Profiling und Integration mit Versionierungssystemen). Beispiele für spezielle Texteditoren sind Visual Studio Code oder Sublime.\nIntegrierte Entwicklungsumgebungen (IDE): Eine integrierte Entwicklungsumgebung ist ein umfassendes Werkzeug, das Code-Schreiben, Debugging, Profiling, Testing und viele andere Funktionen unterstützt. Sie bieten in der Regel eine visuelle Umgebung, in der man Code schreiben, Fehler finden und vieles mehr tun kann. IDEs sind in der Regel für fortgeschrittene Entwickler geeignet, die an komplexen Projekten mit vielen Dateien arbeiten. Beispiele für IDEs für Python sind PyCharm und IDLE.\nNotebooks: Jupyter Notebook siehe hier und Google Colab sind Programme, die es ermöglichen, Code, Text, Bilder und visuelle Elemente in einem einzigen Dokument zu kombinieren. Sie sind besonders nützlich für Datenanalyse-Projekte und für die Dokumentation von Code und Analyseergebnissen. Jupyter Notebooks können lokal auf dem eigenen Computer oder in der Cloud ausgeführt werden, während Google Colab in der Cloud ausgeführt wird.\nIm Rahmen dieses Kurses werden wir Notebooks nutzen (wir überlassen es dabei Ihnen, ob Sie Google Colab oder Jupyter Notebooks nutzen möchten).\n\n\nProgramme, um Python-Code auszuführen\nMan unterscheidet zwischen Programmiersprachen, die kompiliert werden müssen und solchen, die interpretiert werden.\nKompilierte Sprachen werden vor der Ausführung in Maschinencode übersetzt, der direkt von der Hardware des Computers ausgeführt werden kann. Dies bedeutet, dass kompilierter Code normalerweise schneller ausgeführt wird, aber auch, dass er nicht direkt von Menschen gelesen werden kann. Beispiele für Sprachen, die kompiliert werden müssen, bevor sie ausgeführt werden, sind C, C++ und Go.\nInterpretierte Sprachen werden während der Ausführung von einem speziellen Programm namens Interpreter “gelesen” und in Maschinencode übersetzt. Dies bedeutet, dass interpretierter Code langsamer ausgeführt wird als kompilierter Code, aber dass er von Menschen leichter gelesen und verstanden werden kann. Beispiele für interpretierte Sprachen sind Python, JavaScript und Ruby.\nUm Python Code auszuführen, benötigt man demnach Software, die den geschriebenen Text (siehe oben) für den Computer übersetzt, damit dieser den Code ausführt. Wir benötigen also eine Software, die unseren Text “interpretiert”. Dies mag sich komplex anhöhren (und die technische Umsetzung ist es in der Tat auch), jedoch müssen wir die technischen Details nicht kennen, um Python nutzen zu können. Wir müssen nur wissen, dass wir einen Interpreter benötigen, um Python-Code auszuführen. Diese wird standardmäßig mit Python installiert. Wir müssen also nur die richtige Software installieren, um sicherzustellen, dass unser geschriebener Python-Code auch ausgeführt werden kann."
  },
  {
    "objectID": "Chapters/02_Chapter/Installation.html#installation-von-schreib--und-ausführungssoftware",
    "href": "Chapters/02_Chapter/Installation.html#installation-von-schreib--und-ausführungssoftware",
    "title": "Installation & Setup",
    "section": "Installation von Schreib- und Ausführungssoftware",
    "text": "Installation von Schreib- und Ausführungssoftware\nIm Rahmen dieses Kurses werden wir Notebooks nutzen. Diese haben sich als sehr nützlich für die Zwecke der Datenanalyse herausgestellt und erfreuen sich in der Datenanalyse-Community großer Beliebtheit.\nWir überlassen es Ihnen, ob Sie Google Colab oder Jupyter Notebooks nutzen möchten, empfehlen jedoch die lokale Installation und werden auch im Rahmen der Veranstaltungen selber auf Jupyter Notebooks zurückgreifen. Sollten Sie jedoch Probleme bei der Installation haben oder prinzipiell eine Cloud-Lösung bevorzugen, können Sie auch Google Colab nutzen.\nEgal für welche Variante Sie sich entscheiden: beide Tools sind kostenfrei verfügbar und können genutzt werden, um Python-Code zu schreiben und auszuführen. Sie müssen sich über die technischen Details der Ausführung von Python-Code für die Zwecke dieser Veranstaltung also keine weiteren Gedanken mehr machen.\n\nVariante 1: Lokale Installation\nAlternativ können Sie Python auch lokal auf Ihrem Computer installieren. Hierfür gibt es verschiedene Varianten. Wir empfehlen Anaconda für die Installation von Python und viele der relevanten Bibliotheken zu nutzen.\nGehen Sie dafür auf die Webseite und laden sich Anaconda herunter und installieren das Programm. Das Programm ist für Windows und Mac jeweils kostenlos verfügbar.\n\n\n\nDownload Anaconda\n\n\nSobald dies geschehen ist, können Sie den sogenannten Anaconda Navigator öffnen und Jupyter Notebooks oder Jupyter Lab nutzen.\n\n\n\nAnaconda Navigator\n\n\n\n\nVariante 2: Google Colab\nEs ist keine Voraussetzung, dass Sie Python und Jupyter Notebooks lokal auf ihrem Computer installieren. Sie können stattdessen die von Google angebotene Cloud-Variante von Jupyter Notebooks nutzen: google colab. Das ganze ist kostenfrei verfügbar und Sie benötigen dafür lediglich einen Google-Account."
  },
  {
    "objectID": "Chapters/02_Chapter/Introduction_notebook.html#zellentypen",
    "href": "Chapters/02_Chapter/Introduction_notebook.html#zellentypen",
    "title": "Einführung Notebooks",
    "section": "Zellentypen",
    "text": "Zellentypen\nEin Notebook besteht aus einer Folge von Zellen. Jede Zelle kann einen von zwei Typen3 haben:3 Hinweis: der dritten Zelltyp _raw__ ist für unsere Zwecke nicht weiter relevant\n\nCode-Zelle\nMarkdown-Zelle\n\n\nCode-Zelle\nIn einer Code-Zelle können Sie Python-Code schreiben und ausführen. Die folgende Zelle ist eine Code-Zelle, die Python Code enthält (der Code ist zugegebenermaßen nicht sonderlich komplex).\n\n3 + 4\n\n7\n\n\nDas Ergebnis des ausgeführten Python-Code (in unserem Falle 7) wird erst dann berechnet, wenn Sie die Zelle ausführen. Dies tun Sie, in dem Sie die Zelle markieren und dann STRG + ENTER drücken.\nZellen werden zu Code-Zellen, wenn Sie den Typ der Zelle auf Code setzen. Dies können Sie mit dem Shortcut ESC + Y tun.\n\n\nMarkdown-Zelle\nIn einer Markdown-Zelle können Sie Text schreiben, der ihren Code erläutert. Markdown ist eine einfache Textformatierungssprache, die es Ihnen erlaubt, Text zu formatieren. Sie können zum Beispiel Text kursiv setzen, Fettschrift verwenden, Formeln erstellen, Listen erstellen, Links setzen, Bilder einfügen, Tabellen erstellen, etc.\n\n\n\n\n\n\n\n\nHinweis\n\n\n\nDas Skript, welches Sie gerade lesen, ist ein Notebook und besteht aus einer Folge von Markdown- und Code-Zellen.\n\n\nHier ein Beispiel für den Inhalt eine Markdown-Zelle:\n### Eine Überschrift der Ebene 3\n\nDies ist ein Absatz, der __fette__ und _kursive_ Schrift enthält. Außerdem ein [Link](https://www.google.com) und ein Bild:\n\n![Bild](https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/100px-Jupyter_logo.svg.png)\n\nEine Tabelle:\n\n| Spalte 1 | Spalte 2 |\n|----------|----------|\n| 1        | 2        |\n| 3        | 4        |\n\nEine Formel:\n\n$$\n\\int_0^1 x^2 \\, dx = \\frac{1}{3}\n$$\n\nEine Liste:\n\n- Punkt 1\n- Punkt 2\n\nNach dem Ausführen der Zelle sehen Sie den Text, der in der Zelle steht. Dieser sieht dann wie folgt aus:\n\n\nEine Überschrift der Ebene 3\nDies ist ein Absatz, der fette und kursive Schrift enthält. Außerdem ein Link und ein Bild:\n\n\n\nBild\n\n\nEine Tabelle:\n\n\n\nSpalte 1\nSpalte 2\n\n\n\n\n1\n2\n\n\n3\n4\n\n\n\nEine Formel:\n\\[\n\\int_0^1 x^2 \\, dx = \\frac{1}{3}\n\\]\nEine Liste:\n\nPunkt 1\nPunkt 2\n\nZellen werden zu Markdown-Zellen, wenn Sie den Typ der Zelle auf Markdown setzen. Dies können Sie mit dem Shortcut ESC + M tun."
  },
  {
    "objectID": "Chapters/02_Chapter/Introduction_notebook.html#arbeitsablauf",
    "href": "Chapters/02_Chapter/Introduction_notebook.html#arbeitsablauf",
    "title": "Einführung Notebooks",
    "section": "Arbeitsablauf",
    "text": "Arbeitsablauf\nSie schreiben Programme in Jupyter Notebooks, indem Sie eine Folge von Zellen erstellen. Jede Zelle enthält entweder Python-Code oder Text, der Ihren Code erläutert. Die Summe aller Zellen ist Ihr Notebook und sieht dann z.B. so aus:\n\n\n\nBeispiel: Notebook"
  },
  {
    "objectID": "Chapters/02_Chapter/Introduction_notebook.html#shortcuts",
    "href": "Chapters/02_Chapter/Introduction_notebook.html#shortcuts",
    "title": "Einführung Notebooks",
    "section": "Shortcuts",
    "text": "Shortcuts\nUm die Arbeit mit Notebooks zu erleichtern, gibt es eine Reihe von Shortcuts, die Sie verwenden können. Die wichtigsten sind:\n\nESC + Y: Zelle zu Code-Zelle machen\nESC + M: Zelle zu Markdown-Zelle machen\nESC + A: Zelle oberhalb der aktuellen Zelle einfügen\nESC + B: Zelle unterhalb der aktuellen Zelle einfügen\nESC + D + D: Zelle löschen\nSHIFT + ENTER: Zelle ausführen und Cursor i nächste Zelle springen\nCTRL + ENTER: Zelle ausführen und Cursor in aktuelle Zelle bleiben"
  },
  {
    "objectID": "Chapters/02_Chapter/Introduction_notebook.html#nützliche-hilfen",
    "href": "Chapters/02_Chapter/Introduction_notebook.html#nützliche-hilfen",
    "title": "Einführung Notebooks",
    "section": "Nützliche Hilfen",
    "text": "Nützliche Hilfen\n\nTAB-Taste: Wenn Sie in einer Code-Zelle Python-Code schreiben, können Sie die TAB-Taste drücken, um eine Liste von möglichen Vervollständigungen anzuzeigen.\nSHIFT + TAB: Wenn Sie in einer Code-Zelle Python-Code schreiben, können Sie die SHIFT + TAB-Tastenkombination drücken, um die Dokumentation für die Funktion anzuzeigen, die Sie gerade schreiben."
  },
  {
    "objectID": "Chapters/02_Chapter/Python_Basics.html#einfache-arithmetik",
    "href": "Chapters/02_Chapter/Python_Basics.html#einfache-arithmetik",
    "title": "Kurze Einführung in Python",
    "section": "Einfache Arithmetik",
    "text": "Einfache Arithmetik\nBeginnen wir mit einfachen mathematischen Operationen. Das Beispiel zeigt einen Ausdruck bzw. Statement (im Folgenden verwenden wir den Begriff Statement) mit Berechnungen. Dieser Ausdruck ist in Python geschrieben:\n\n1 + (5 * 12) / 3 - 12\n\n9.0\n\n\nDas Ergebnis - wenn man die Zelle mit STRG + ENTER ausführt - wird unterhalb der Zelle angezeigt und beträgt 9.\nWie man sieht, kann man - analog zu einem Taschenrechner (oder Excel) - die bekannten arithmetischen Operatoren in Python verwenden.\n+ = Addition\n- = Subtraktion\n* = Multiplikation\n/ = Division\n** = Potenzieren (❗ die Schreibweise für \\(3^4\\) in Python lautet \\(3{**}4\\))\nWir werden diese Operatoren im Laufe dieses Kurses immer wieder verwenden. Jedoch nicht wie im obigen Beispiel dargestellt. Dieses Vorgehen ist nämlich meist nicht sinnvoll und wenig vorteilhaft gegenüber z.B. einem Taschenrechner. Auch in einem typischen Tabellenkalkulationsprogramm wie Excel würden wir anders vorgehen, da wird dort typischerweise nicht eine komplette Formel mit fest codierten Werten in eine Zelle schreiben. Dies ist umständlich, wenig flexibel und fehleranfällig. Gleiches gilt für Python.\n\n\n\nBeispiel: Excel\n\n\nIn Excel würden wir stattdessen die Werte auf verschiedene Zellen aufteilen und in einer Ergebniszelle verknüpfen. Dieses Vorgehen hat den Vorteil, dass die Annahmen für das Ergebnis viel transparenter und Änderungen in Annahmen auf einen Blick ersichtlich sind. So wird z.B. deutlich, dass es sich bei der \\(12\\), die in der Berechnung zwei Mal vorkommt (Zellen C5 und C7) um tatsächlich zwei verschiedene Annahmen handelt - sonst würden wir nicht zwei Inputparameter benötigen -, die nur zufällig den selben Wert haben.\n\n\n\nBeispiel: Excel (besser)\n\n\nIn Python können wir das gleiche Vorgehen verwenden. Wir können die Werte in Variablen speichern und dann die Berechnung in einer weiteren Variablen durchführen."
  },
  {
    "objectID": "Chapters/02_Chapter/Python_Basics.html#variablen-und-zuweisung",
    "href": "Chapters/02_Chapter/Python_Basics.html#variablen-und-zuweisung",
    "title": "Kurze Einführung in Python",
    "section": "Variablen und Zuweisung",
    "text": "Variablen und Zuweisung\nIn Python kann man Variablen wie Platzhalter für Werte verwenden. Man kann einer Variablen einen Wert zuweisen, indem man den Variablennamen schreibt, gefolgt von dem Zuweisungsoperator = und dem Wert, den man der Variablen zuweisen möchte. Wir schreiben also\n<variable> = <wert>\nZum Beispiel:\n\nzahl1 = 42\nzahl2 = 3.2\nsatz = \"Deutscher Meister wird nur der BVB\"\n\nNamen für Variablen sollten sinnvoll und prägnant (d.h. nicht zu lang) sein. In Python gibt es darüber hinaus die Konvention (siehe PEP 8), dass Variablen klein geschrieben werden und mehrere Wörter mit “_” getrennt werden.\nBeispiel:\n\nliste_zahlen = [1, 2, 3, 4, 5]\nanzahl_elemente = 5\n\nDiese Konvention ist für die Funktion eines Programms nicht entscheiden, jedoch erleichtert diese die Lesbarkeit des Codes.\nWir können nun das Konzept der Variablenzuweisung verwenden, um Berechnungen durchzuführen.\n\ncash_flow = 100\nzinssatz = 0.05\nkapitalwert = cash_flow / (1 + zinssatz)\nkapitalwert\n\n95.23809523809524\n\n\nNatürlich benötigen wir diese Art der Berechnungen keine Programmierkenntnisse, sondern könnten diese am Taschenrechner oder in Excel durchführen (in diesem Falle vermutlich die bessere Idee). Jedoch können wir das Grundkonzept der Variablenzuweisung auch für wesentlich komplexere Probleme oder Fragestellungen anwenden, bei denen ein Taschenrechner oder auch Excel nicht mehr geeignet wären. Was meinen wir mit komplex? Zum einen ist es Python egal, was wir in einer Variablen speichern. Wir können also auch ganz andere Dinge in Variablen speichern und dann mit diesen weiterarbeiten. So können wir z.B. große Datenmengen (z.B. ein Excelsheet oder eine Datenbank) einer Variabel zuweisen und dann mit dieser weiterarbieten (siehe unten). Zum anderen werden wir auch weitere Grundkonzepte kennenlernen, die es uns ermöglichen, mit Variablen zu arbeiten (z.B. könnnen wir Bedingungen anlegen, die abhängig von den Werten in Variablen sind).\nIn der untenstehenden Zelle wird eine Exceltabelle in eine Variable tabelle gespeichert. Wir können mit dieser Variable dann weiterarbeiten und z.B. die Daten in der Tabelle auswerten, neue Daten hinzufügen oder die Tabelle in eine andere Datei exportieren.\n\nimport pandas as pd \n\ndatei_pfad = \"../../_data/sales.xlsx\"\ntabelle = pd.read_excel(datei_pfad)\ntabelle\n\n\n\n\n\n  \n    \n      \n      Produkt\n      Preis\n      Menge\n      Datum\n    \n  \n  \n    \n      0\n      Apple\n      0.79\n      10\n      2022-01-01\n    \n    \n      1\n      Orange\n      1.99\n      1\n      2022-01-02\n    \n    \n      2\n      Orange\n      1.99\n      5\n      2022-01-03\n    \n    \n      3\n      Banana\n      0.79\n      1\n      2022-01-04\n    \n    \n      4\n      Apple\n      0.79\n      7\n      2022-01-05\n    \n    \n      5\n      Orange\n      1.99\n      2\n      2022-01-06\n    \n    \n      6\n      Banana\n      0.79\n      9\n      2022-01-07\n    \n    \n      7\n      Apple\n      1.99\n      4\n      2022-01-08\n    \n    \n      8\n      Apple\n      2.49\n      8\n      2022-01-09\n    \n    \n      9\n      Orange\n      2.49\n      7\n      2022-01-010"
  },
  {
    "objectID": "Chapters/02_Chapter/Python_Basics.html#datentypen",
    "href": "Chapters/02_Chapter/Python_Basics.html#datentypen",
    "title": "Kurze Einführung in Python",
    "section": "Datentypen",
    "text": "Datentypen\nUnser vorheriges Beispiel zeigt, dass Variablen ganz unterschiedliche Inhalte haben können. Wir haben Zahlen, einen Text und eine Tabelle in Variablen gespeichert. Wir sprechen in diesem Fall davon, dass eine Variable einen bestimmten Datentyp hat. In der untenstehenden Tabelle (Tabelle 6.1) sind die Datentypen unserer Variablen aufgelistet.\n\n\nTabelle 6.1: Datentypen der Beispielvariablen\n\n\nDatentyp\nBeispiel\nBeschreibung\n\n\n\n\nint\n42\nGanze Zahl\n\n\nfloat\n3.2\nGleitkommazahl\n\n\nstr\n\"Deutscher Meister wird nur der BVB\"\nText\n\n\nDataFrame1\ntabelle\nTabelle\n\n\n\n1 Konkret: pd.DataFrame\nWir können den Typ einer Variablen mit dem Befehl type() herausfinden.\nWir können also z.B. den Typ der Variablen zahl1 mit dem Befehl type(zahl1) herausfinden.\n\ntype(zahl1)\n\nint\n\n\nDen Typ der Daten können wir meist nicht am Namen der Variablen erkennen. Außerdem ist es so, dass wir den Datentyp einer Variabel verändern können, in dem wir ihr einen neuen Wert zuweisen.\n\nzahl1 = 0.12\ntype(zahl1)\n\nfloat\n\n\nIm obigen Beispiel haben wir der Variablen zahl1 einen neuen Wert zugewiesen. Dieser Wert ist eine Gleitkommazahl. Dadurch hat sich der Datentyp der Variablen von int zu float geändert.\nDer Typ der Variable hängt also von den Werten ab, den wir ihr zuweisen.\nNun mögen wir uns fragen, warum wir uns überhaupt mit dem Datentyp einer Variablen beschäftigen müssen. Der Datentyp einer Variable ist wichtig, da dieser bestimmt, welche Fähigkeiten2 eine Variable hat.2 Wir verwende bewusst den untechnischen Begriff der Fähigkeit, um zu verdeutlichen, was die jeweilige Variable kann. Wir müssen an dieser Stelle keine technischen Begriffe verwenden.\nPrinzipiell ist es aus zwei Gründen wichtig, die Fähigkeiten einer Variable zu kennen:\n\nWir sollten die Fähigkeiten einer Variable kennen, um Fehler zu vermeiden.\nWir können die Fähigkeiten einer Variable nutzen, um unsere Aufgaben zu lösen.\n\nLassen Sie uns zwei Beispiele betrachten, die zeigen, wie wir die Fähigkeiten einer Variable nutzen können.\n\nBeispiel 1: Fehler vermeiden\nWir haben bereits kennengelernt, dass wir mit Variablen einfache Rechnungen durchführen können. Wir können z.B. zwei Variablen addieren, indem wir die beiden Variablen mit dem +-Zeichen verknüpfen.\n\nzahl1 = 2\nzahl2 = 3\nzahl1 + zahl2\n\n5\n\n\nDiese Rechnung funktioniert, da die beiden Variablen zahl1 und zahl2 beide Zahlen sind. Was passiert jedoch, wenn wir zwei Variablen addieren, die keine Zahlen, sondern z.B. Texte sind?\n\ntext1 = \"12\"\ntext2 = \"3\"\ntext1 + text2\n\n'123'\n\n\nZu unserer Überraschung erhalten wir als Ergebnis nicht die Zahl 15, sondern den Text 123. Dies ist problematisch, da wir bei der Berechnung eigentlich eines von zwei Ergebnissen erwarten würden: (i) eine Fehlermeldung, da wir zwei Texte addieren wollen, oder (ii) das korrekte Ergebnis 15. Das Ergebnis 123 ist jedoch nicht das, was wir erwarten würden.\nDas Beispiel ist natürlich sehr simpel und konstruiert. In der Praxis werden wir jedoch häufiger mit solchen Fehlern konfrontiert, bei denen wir Fähigkeiten auf Datentypen anwenden, die anders sind als die Fähigkeiten, die wir eigentlich anwenden wollen. Wir sollten uns also immer bewusst sein, welche Fähigkeiten eine Variable hat und diese Fähigkeiten nutzen, um Fehler zu vermeiden.\n\n\nBeispiel 2: Fähigkeiten nutzen\nLassen Sie uns das vorherige Beispiel aufgreifen. Wir haben gesehen, dass wir Variablen vom Datentype str nicht im mathematischen Sinne addieren können. Wieso hat das Programm dann aber keinen Fehler ausgeworfen. Der Grund hierfür ist, dass wir die Operation + nicht für mathematische Berechnungen nutzen sollten, sondern für das Zusammenfügen von Texten. Wenn wir dies wissen, können wir uns diese Fähigkeit zu Nutze machen.\n\nvorname = \"Max\"\nnachname = \"Mustermann\"\nanrede = \"Lieber Herr \" + vorname + \" \" + nachname\nanrede\n\n'Lieber Herr Max Mustermann'\n\n\nAuch dies ist natürlich nur ein sehr simples Beispiel, um zu verdeutlichen, dass jede Datentyp unterschiedliche Fähigkeiten hat und wir diese nutzen, um unsere Aufgabenstellung zu lösen.\nWie stelle ich nun aber fest, welche Fähigkeiten eine Variable hat? Hier für gibt es verschiedene Wege:\n\nwir können die help()-Funktion nutzen, um uns die Dokumentation zu einem Datentyp anzeigen zu lassen.\n\n\nhelp(str) # Hilfe für den Datentyp str\n\n\nwir können die dir()-Funktion nutzen, um uns die Methoden eines Datentyps anzeigen zu lassen.\n\n\ndir(str) # Fähigkeiten für den Datentyp str\n\n\nwir können über .TAB-Vervollständigung die Fähigkeiten einer Variable anzeigen lassen.\n\n\n\n\nBeispiel: TAB completion\n\n\n\nwir können in die Dokumentation von Python bzw. die der jeweiligen Bibliothek3 schauen.\n\n3 Was das genau ist, wir in Sektion [TODO] erläutert"
  },
  {
    "objectID": "Chapters/02_Chapter/Python_Basics.html#fehlermeldungen",
    "href": "Chapters/02_Chapter/Python_Basics.html#fehlermeldungen",
    "title": "Kurze Einführung in Python",
    "section": "Fehlermeldungen",
    "text": "Fehlermeldungen\nIm Zuge Ihrer Arbeit mit Python werden Sie immer wieder Fehlermeldungen erhalten. Diese Fehlermeldungen sind Fluch und Segen zugleich. Was sind Fehlermeldungen und warum sind diese so wichtig? Fehlermeldungen sind eine Art Feedback (in diesem Fall von Python), das uns mitteilt, dass etwas nicht funktioniert.\nGerade als Anfänger können Fehlermeldungen sehr frustrierend sein. Schließlich weisen diese uns daraufhin, dass der Code, den wir geschrieben haben, nicht funktioniert. Machen Sie jedoch nicht den Fehler zu glaubne, dass Fehlermeldungen nur von Anfängern produziert werden. Auch erfahrene Programmierer stolpern quasi täglich über Fehlermeldungen. Der Unterschied zwischen erfahrenen Programmierern und absoluten Anfängern ist jedoch, dass letztere die Fehlermeldungen meist verwirrend und unverständlich finden und dieses deshalb nicht für sich zu nutzen wissen.\nFehlermeldungen geben uns nämlich wertvolle Hinweise darauf, was genau nicht funktioniert. Wir sollten uns also immer die Zeit nehmen, Fehlermeldungen zu lesen und zu verstehen. Oft werden wir dananch feststellen, dass der Fehler nicht in der Logik unseres Codes liegt, sondern in der Syntax (d.h. wir haben z.B. einen Tipfehler gemacht) und wir diesen schnell beheben können.\nLassen Sie uns ein Beispiel betrachten, bei dem wir eine Fehlermeldung erhalten.\n\nvorname = \"Max\"\nnachname = \"Mustermann\"\nanrede = \"Lieber Herr \" vorname + \" \" + nachname\nanrede\n\n\n\n\nBeispiel: Fehlermeldung\n\n\nDie rote Fehlermeldung weißt zunächst darauf hin, dass unser Code so nicht funktioniert. Wir sollten also zunächst versuchen, den Fehler zu finden. Die Fehlermeldung hilft uns dabei. Wir sollten dabei immer zunächst auf die letzte Zeile der Fehlermeldung schauen. Dort wird uns mitgeteilt, um welche Art des Fehlers es sich handelt. In unserem Fall handelt es sich um einen SyntaxError, d.h. wir haben dem Computer einen Befehl geben, den er nicht versteht bzw. kennt. Dies passiert häufig, wenn wir einen Tippfehler gemacht haben. Sobald wir dies wissen, müssen wir uns nur noch den Code finden, in dem der Fehler gemacht wurde. Auch hier hilft uns die Fehlermeldung, da Sie zum einen die Zeile des Codes darstellt, in der der Fehler aufgetreten ist und zum anderen mit dem ^-Symbol auf die Stelle im Code hinweist, der falsch ist. In unserem Fall ist der Fehler demnach, dass wir die Zeichenkette \"Lieber Herr \" nicht mit einem + an die Variable vorname anhängen.\nwir können nun den Fehler beheben und den Code erneut ausführen.\n\nvorname = \"Max\"\nnachname = \"Mustermann\"\nanrede = \"Lieber Herr \" + vorname + \" \" + nachname\nanrede\n\n'Lieber Herr Max Mustermann'\n\n\nEs gibt viele verschiedene Fehlermeldungen - einigen von Ihnen werden Sie in diesem Kurs produzieren - die teilweise auch komplexer sind bzw. schwerer zu beheben sind. Wir können (und wollen) an dieser Stelle nicht auf alle verschiedenen Fehler eingehen. Uns geht es darum, dass Sie sich durch Fehlermeldungen nicht abschrecken lassen und diese als Hilfsmittel nutzen, um Ihren Code zu verbessern. In der untenstehenden Tabelle (Tabelle 6.2) finden Sie eine Auswahl an häufigen Fehlermeldungen.\n\n\nTabelle 6.2: Beispiele: Fehlermeldungen\n\n\n\n\n\n\n\nFehlermeldung\nBeschreibung der Art des Fehlers\nkurzes Beispiel\n\n\n\n\nSyntaxError: EOL while scanning string literal\nFehler bei der Syntax, in dem ein String nicht richtig abgeschlossen wurde.\n“Max Muster\n\n\nNameError: name ‘y’ is not defined\nFehler bei der Verwendung einer Variable, die nicht definiert wurde.\nx = y + 2\n\n\nTypeError: unsupported operand type(s) for +: ‘int’ and ‘str’\nFehler beim Verwenden eines Operators mit ungültigen Typen.\n2 + “Text”\n\n\nIndexError: list index out of range\nFehler beim Zugriff auf ein Element einer Liste, das nicht existiert.\nmeine_liste[5]\n\n\nKeyError: ‘key’\nFehler beim Zugriff auf einen Schlüssel in einem Dictionary, der nicht existiert.\nmein_dictionary[‘alter’]"
  },
  {
    "objectID": "Chapters/02_Chapter/Python_Basics.html#importieren-von-modulen-und-bibliotheken",
    "href": "Chapters/02_Chapter/Python_Basics.html#importieren-von-modulen-und-bibliotheken",
    "title": "Kurze Einführung in Python",
    "section": "Importieren von Modulen und Bibliotheken",
    "text": "Importieren von Modulen und Bibliotheken\n\nBuilt-in Fähigkeiten\nWir haben in diesem Kapitel von Fähigkeiten gesprochen, die wir nutzen, um unsere Analysen durchzuführen. Lassen Sie uns an dieser Stelle ein Geheimnis lüften: Python bzw. die zur Verfügung stehenden Datentypen haben in Summe kaum die Fähigkeiten, die wir für unsere Analysen benötigen.\nDies mag zunächst überraschen ist jedoch vor dem Hintergrund, dass Python ursprünglich nicht für die Analyse von Daten entwickelt wurde, zu verstehen. Eine Standardinstallation von Python enthält nur die Grundfähigkeiten, von denen wir bereits einige kennengelernt haben. Mit Fähigkeiten meinen wir an dieser Stelle\n\ndie Datentypen, die Python zur Verfügung stellt und\ndie Funktionen, die wir auf diesen Datentypen anwenden können und\n\nWir haben bereits einige Datentypen kennengelernt, die Python zur Verfügung stellt. Diese sind z.B. int, float, str, list und dict. Auch haben wir einige Funktionen kennengelernt, die wir auf diesen Datentypen anwenden können. Diese sind z.B. print(), dir() und help(). Eine Liste der verfügbaren Funktionen finden Sie in der Python-Dokumentation.\nMit der Summe der verfügbaren Datentypen und Funktionen können wir theoretisch alle Analysen durchführen, die wir uns vorstellen können. Dies ist jedoch sehr aufwendig und würde viel Zeit in Anspruch nehmen. Wir müssten nämlich alle Funktionen, die wir im Rahmen eine Datenanalyse (d.h. der Erstellung von Diagrammen, der Berechnung von Kennzahlen, der Erstellung von Statistiken, etc.) benötigen, selbst schreiben. Dies ist nicht nur sehr aufwendig, sondern auch sehr fehleranfällig.\nGlücklicherweise gibt es jedoch eine Vielzahl an Modulen und Bibliotheken, die wir nutzen können, um die Fähigkeiten von Python zu erweitern. Diese Module und Bibliotheken sind bereits für uns geschrieben und müssen nur noch importiert werden. Wir werden in diesem Kurs einige Module und Bibliotheken kennenlernen, die wir nutzen können, um unsere Analysen durchzuführen.\n\n\nImportieren von Modulen und Bibliotheken\nWir können uns die zusätzlichen Fähigkeiten, die wir über den Import von Modulen und Bibliotheken erhalten, als eine Art “Erweiterung” von Python vorstellen - vergleichbar zu Add-ons in Excel. Da es sich bei Python um eine sogenannte Open-Source Sprache handelt, können die benötigten Erweiterungen im Internet eingesehen und kostenlos heruntergeladen werden.\nWir können diese Erweiterungen nutzen, in dem wir zwei Schritte durchführen:\n\nInstallieren der Erweiterung (einmalig)\nImportieren der Erweiterung\n\n\n\n\n\n\n\nInfo\n\n\n\nSofern Sie Python via Anaconda installiert haben oder google colab nutzen, sollten die von uns benötigten Module bereits vorinstalliert sein.\n\n\nFalls dies jedoch nicht der Fall ist, können Sie die Module über das Terminal typischerweise über den Befehl pip install <modulname> installieren4. Sie können die Module auch direkt in ihrem Jupyter Notebook installieren. Dazu müssen Sie lediglich den folgenden Code in einer Zeile ausführen:4 Hinweis: <modulname> ist hier ein Platzhalter für den jeweiligen Namen der Bibliothek oder des Moduls\nimport sys\n!{sys.executable} -m pip install <modulname>\nSobald die Erweiterung installiert ist, können wir diese in unserem Code importieren. Dies geschieht über den Befehl import. Wir haben dies bereits einmal in diesem Kurs gesehen, als wir eine Exceldatei in ein DataFrame eingelesen haben.\nDer Import von Modulen erfolgt typischerweise über drei Varianten:\n\nImportieren des gesamten Moduls\nImportieren einer Funktion aus einem Modul\nImportieren des gesamten Moduls unter einem anderen Namen\n\nLassen Sie uns dies anhand des Moduls statistics (welches wir im weiteren Verlaufe des Kurses nicht weiter benötigen) verdeutlichen\nBeispiel 1: Importieren des gesamten Moduls\n\nimport statistics\n\ndaten = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\navg = statistics.mean(daten)\navg\n\n5.5\n\n\nWir haben hier das gesamte Modul importiert und können nun alle Fähigkeiten, die dieses Modul zur Verfügung stellt, nutzen. In diesem Fall haben wir die Funktion mean() aus dem Modul statistics genutzt, um den Mittelwert der Daten zu berechnen.\nBeispiel 2: Importieren einer Funktion aus einem Modul\n\nfrom statistics import mean\n\ndaten = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\navg = mean(daten)\navg\n\n5.5\n\n\nWir haben hier nur die Funktion mean() aus dem Modul statistics importiert. Dies hat den Vorteil, dass wir nicht mehr den Namen des Moduls angeben müssen, wenn wir die Funktion nutzen wollen. Jedoch können wir auch nur die Funktion mean() aus dem Modul statistics nutzen, alle anderen Funktionen sind nicht verfügbar.\nBeispiel 3: Importieren des gesamten Moduls unter einem anderen Namen\n\nimport statistics as stat\n\ndaten = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\navg = stat.mean(daten)\navg\n\n5.5\n\n\nWir haben hier das gesamte Modul statistics importiert und ihm den Namen stat gegeben. Dies hat den Vorteil, dass wir nicht mehr den Namen des Moduls angeben müssen, wenn wir die Funktion nutzen wollen. Jedoch können wir auch alle Funktionen aus dem Modul statistics nutzen, auch wenn wir diese nicht explizit importiert haben.\nOft ist es so, dass sich in der Praxis Variante 3 für bestimmte Module durchgesetzt hat. So wird z.B. das Modul pandas - unser Schweizer Taschenmesser der Datenanalyse - meist unter dem Namen pd importiert.\n\nimport pandas as pd\n\nSie müssen sich dieser Konventionen nicht anpassen, wenn Sie nicht möchten. Jedoch ist es sinnvoll, da insbesondere Hilfen im Internet (oder auch von ChatGTP) häufig unter der Annahme, dass Sie die Module entsprechend importiert haben, geschrieben sind."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "LITERATUR",
    "section": "",
    "text": "Almazmomi, Najah, Aboobucker Ilmudeen, and Alaa A. Qaffas. 2021.\n“The Impact of Business Analytics Capability on Data-Driven\nCulture and Exploration: Achieving a Competitive Advantage.”\nBenchmarking: An International Journal 29 (4): 1264–83. https://doi.org/10.1108/BIJ-01-2021-0021.\n\n\nGluchowski, Peter. 2016. “Business Analytics –\nGrundlagen, Methoden Und\nEinsatzpotenziale.” HMD Praxis Der\nWirtschaftsinformatik 53 (3): 273–86. https://doi.org/10.1365/s40702-015-0206-5.\n\n\nMcAfee, Andrew, and Erik Brynjolfsson. 2017. Machine, Platform,\nCrowd: Harnessing Our Digital Future. First edition. New York: W.W.\nNorton & Company.\n\n\nPopovič, Aleš, Ray Hackney, Rana Tassabehji, and Mauro Castelli. 2018.\n“The Impact of Big Data Analytics on Firms’ High Value Business\nPerformance.” Information Systems Frontiers 20 (2):\n209–22. https://doi.org/10.1007/s10796-016-9720-4.\n\n\nSeiter, Mischa. 2019. Business Analytics:\nWie Sie Daten Für Die\nSteuerung von Unternehmen Nutzen. 2.,\nkomplett überarbeitete und erweiterte. München: Vahlen.\n\n\nShanks, Graeme, Rajeev Sharma, Peter Seddon, and Peter Reynolds. 2010.\n“The Impact of Strategy and\nMaturity on Business Analytics\nand Firm Performance: A\nReview and Research\nAgenda.” ACIS 2010 Proceedings, January. https://aisel.aisnet.org/acis2010/51.\n\n\nWickham, Hadley, and Garrett Grolemund. 2016. R for\nData Science: Import,\nTidy, Transform, Visualize, and\nModel Data. \"O’Reilly Media, Inc.\"."
  }
]